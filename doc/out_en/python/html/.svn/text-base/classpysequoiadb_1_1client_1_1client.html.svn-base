<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.7"/>
<title>SequoiaDB: pysequoiadb.client.client Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SequoiaDB
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>pysequoiadb</b></li><li class="navelem"><b>client</b></li><li class="navelem"><a class="el" href="classpysequoiadb_1_1client_1_1client.html">client</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="classpysequoiadb_1_1client_1_1client-members.html">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pysequoiadb.client.client Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for pysequoiadb.client.client:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classpysequoiadb_1_1client_1_1client.png" usemap="#pysequoiadb.client.client_map" alt=""/>
  <map id="pysequoiadb.client.client_map" name="pysequoiadb.client.client_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad526e7d3831d5d4361e43520e1141edb"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ad526e7d3831d5d4361e43520e1141edb">__init__</a></td></tr>
<tr class="separator:ad526e7d3831d5d4361e43520e1141edb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac115d9757d8cc000e3354fe7fda48e51"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ac115d9757d8cc000e3354fe7fda48e51">__del__</a></td></tr>
<tr class="separator:ac115d9757d8cc000e3354fe7fda48e51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c81a27a9475d70f5c45366493e79700"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6c81a27a9475d70f5c45366493e79700"></a>
def&#160;</td><td class="memItemRight" valign="bottom"><b>__repr__</b></td></tr>
<tr class="separator:a6c81a27a9475d70f5c45366493e79700"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa084932122b32e717986985d0967c14"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#aaa084932122b32e717986985d0967c14">__getitem__</a></td></tr>
<tr class="separator:aaa084932122b32e717986985d0967c14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60c7707597e8804216925b302262ec9b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a60c7707597e8804216925b302262ec9b">__getattr__</a></td></tr>
<tr class="separator:a60c7707597e8804216925b302262ec9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94ed87aee00da0ee5d01e020c79c363f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a94ed87aee00da0ee5d01e020c79c363f">connect_to_hosts</a></td></tr>
<tr class="separator:a94ed87aee00da0ee5d01e020c79c363f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86b9d348b3c506eb35de350669dad7a2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a86b9d348b3c506eb35de350669dad7a2">connect</a></td></tr>
<tr class="separator:a86b9d348b3c506eb35de350669dad7a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55386e002908c9be26d7ec1255198893"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a55386e002908c9be26d7ec1255198893">disconnect</a></td></tr>
<tr class="separator:a55386e002908c9be26d7ec1255198893"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57ae3dc886d7c24997b030e8c1e8d17a"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a57ae3dc886d7c24997b030e8c1e8d17a">create_user</a></td></tr>
<tr class="separator:a57ae3dc886d7c24997b030e8c1e8d17a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32387dcc83e8154c256d9fe0e296e569"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a32387dcc83e8154c256d9fe0e296e569">remove_user</a></td></tr>
<tr class="separator:a32387dcc83e8154c256d9fe0e296e569"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b4a3397fcc672f16e4f246a11f1f043"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a5b4a3397fcc672f16e4f246a11f1f043">get_snapshot</a></td></tr>
<tr class="separator:a5b4a3397fcc672f16e4f246a11f1f043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a802271bfd2af0d83a51c00f32e82f1b5"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a802271bfd2af0d83a51c00f32e82f1b5">reset_snapshot</a></td></tr>
<tr class="separator:a802271bfd2af0d83a51c00f32e82f1b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa46aadcceaa60e051232b5f11e8e2fa6"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#aa46aadcceaa60e051232b5f11e8e2fa6">get_list</a></td></tr>
<tr class="separator:aa46aadcceaa60e051232b5f11e8e2fa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac5781599c778c7b46284848747403b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a8ac5781599c778c7b46284848747403b">get_collection</a></td></tr>
<tr class="separator:a8ac5781599c778c7b46284848747403b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afffd4b8c52b3afb43a672a17b75ce750"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#afffd4b8c52b3afb43a672a17b75ce750">get_collection_space</a></td></tr>
<tr class="separator:afffd4b8c52b3afb43a672a17b75ce750"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548cc40bec6b5722d367458912ad23bb"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a548cc40bec6b5722d367458912ad23bb">create_collection_space</a></td></tr>
<tr class="separator:a548cc40bec6b5722d367458912ad23bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad547f29394c428ec463b073f7e3f504f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ad547f29394c428ec463b073f7e3f504f">drop_collection_space</a></td></tr>
<tr class="separator:ad547f29394c428ec463b073f7e3f504f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d1f928c6daa64e4ecd5fcb5b5522ca2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a0d1f928c6daa64e4ecd5fcb5b5522ca2">list_collection_spaces</a></td></tr>
<tr class="separator:a0d1f928c6daa64e4ecd5fcb5b5522ca2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a289ea32fe644eceb22f6307b3fd07774"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a289ea32fe644eceb22f6307b3fd07774">list_collections</a></td></tr>
<tr class="separator:a289ea32fe644eceb22f6307b3fd07774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a530ab422e01272850b8d24e642356c23"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a530ab422e01272850b8d24e642356c23">list_replica_groups</a></td></tr>
<tr class="separator:a530ab422e01272850b8d24e642356c23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73978533e8110aca43ff5dae5c50158f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a73978533e8110aca43ff5dae5c50158f">get_replica_group_by_name</a></td></tr>
<tr class="separator:a73978533e8110aca43ff5dae5c50158f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace39918a643349f7ec885e48fb6619ae"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ace39918a643349f7ec885e48fb6619ae">get_replica_group_by_id</a></td></tr>
<tr class="separator:ace39918a643349f7ec885e48fb6619ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7062fc86f4bc0b8ce0254bc8e6c20642"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a7062fc86f4bc0b8ce0254bc8e6c20642">create_replica_group</a></td></tr>
<tr class="separator:a7062fc86f4bc0b8ce0254bc8e6c20642"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bb16475a5920aca0aac4e0c2b3cd2ff"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a8bb16475a5920aca0aac4e0c2b3cd2ff">remove_replica_group</a></td></tr>
<tr class="separator:a8bb16475a5920aca0aac4e0c2b3cd2ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dbbd95e0e6825654fe396bc3df898fa"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a1dbbd95e0e6825654fe396bc3df898fa">create_replica_cata_group</a></td></tr>
<tr class="separator:a1dbbd95e0e6825654fe396bc3df898fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c90cd66fb624dc4011b5550de6c04bf"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a6c90cd66fb624dc4011b5550de6c04bf">exec_update</a></td></tr>
<tr class="separator:a6c90cd66fb624dc4011b5550de6c04bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05b8411fb1999b6a9c0e169cbbc962e0"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a05b8411fb1999b6a9c0e169cbbc962e0">exec_sql</a></td></tr>
<tr class="separator:a05b8411fb1999b6a9c0e169cbbc962e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3441697fa95c393e8ffe95253a78f86"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ac3441697fa95c393e8ffe95253a78f86">transaction_begin</a></td></tr>
<tr class="separator:ac3441697fa95c393e8ffe95253a78f86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a875d2fab73379843f13341cc072f79cc"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a875d2fab73379843f13341cc072f79cc">transaction_commit</a></td></tr>
<tr class="separator:a875d2fab73379843f13341cc072f79cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8b04bbb798ca76b1a4afe225adf1dbd"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#af8b04bbb798ca76b1a4afe225adf1dbd">transaction_rollback</a></td></tr>
<tr class="separator:af8b04bbb798ca76b1a4afe225adf1dbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38fd053ad7658714ccf5fab3979abc38"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a38fd053ad7658714ccf5fab3979abc38">flush_configure</a></td></tr>
<tr class="separator:a38fd053ad7658714ccf5fab3979abc38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7f610fd0eb59b86297b4e266d14b47f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ad7f610fd0eb59b86297b4e266d14b47f">create_procedure</a></td></tr>
<tr class="separator:ad7f610fd0eb59b86297b4e266d14b47f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f0d379ad4934428704d8e895920f3bd"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a4f0d379ad4934428704d8e895920f3bd">remove_procedure</a></td></tr>
<tr class="separator:a4f0d379ad4934428704d8e895920f3bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88d894f9bb1629581ea2394e763f1c4f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a88d894f9bb1629581ea2394e763f1c4f">list_procedures</a></td></tr>
<tr class="separator:a88d894f9bb1629581ea2394e763f1c4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01b4ee964bce6f1ef569cf172e3e221c"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a01b4ee964bce6f1ef569cf172e3e221c">eval_procedure</a></td></tr>
<tr class="separator:a01b4ee964bce6f1ef569cf172e3e221c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaedee49eee7c9947806e00acfc76f8f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#abaedee49eee7c9947806e00acfc76f8f">backup_offline</a></td></tr>
<tr class="separator:abaedee49eee7c9947806e00acfc76f8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3739b3eb603c359703a9b363f3840b71"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a3739b3eb603c359703a9b363f3840b71">list_backup</a></td></tr>
<tr class="separator:a3739b3eb603c359703a9b363f3840b71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0220a5e47c7a7736d5226727b971da7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#ae0220a5e47c7a7736d5226727b971da7">remove_backup</a></td></tr>
<tr class="separator:ae0220a5e47c7a7736d5226727b971da7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a141706cc810d9b24625abf8a8b450075"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a141706cc810d9b24625abf8a8b450075">list_task</a></td></tr>
<tr class="separator:a141706cc810d9b24625abf8a8b450075"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a441c693adb76d50b7f68423aa2a1ad33"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a441c693adb76d50b7f68423aa2a1ad33">wait_task</a></td></tr>
<tr class="separator:a441c693adb76d50b7f68423aa2a1ad33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a3a3e4e5392bc17cfd0b25abca86a9d"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a3a3a3e4e5392bc17cfd0b25abca86a9d">cancel_task</a></td></tr>
<tr class="separator:a3a3a3e4e5392bc17cfd0b25abca86a9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a294103e4431a7fb950c7377c7c46d3b6"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a294103e4431a7fb950c7377c7c46d3b6">set_session_attri</a></td></tr>
<tr class="separator:a294103e4431a7fb950c7377c7c46d3b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac17be205eaf4e1f9abd7afd7088d999"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#aac17be205eaf4e1f9abd7afd7088d999">close_all_cursors</a></td></tr>
<tr class="separator:aac17be205eaf4e1f9abd7afd7088d999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c223a7d1daf0fd06d3615d4d337a9fa"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1client_1_1client.html#a7c223a7d1daf0fd06d3615d4d337a9fa">is_valid</a></td></tr>
<tr class="separator:a7c223a7d1daf0fd06d3615d4d337a9fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a0127318ebb1546f35ff2e1aae61ff4f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0127318ebb1546f35ff2e1aae61ff4f0"></a>
string&#160;</td><td class="memItemRight" valign="bottom"><b>HOST</b> = &quot;localhost&quot;</td></tr>
<tr class="separator:a0127318ebb1546f35ff2e1aae61ff4f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd5450d9380a20141cb091a58924d014"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acd5450d9380a20141cb091a58924d014"></a>
string&#160;</td><td class="memItemRight" valign="bottom"><b>SERVICE</b> = &quot;11810&quot;</td></tr>
<tr class="separator:acd5450d9380a20141cb091a58924d014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a952d51da1ca0b06b55f3571b1faffa39"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a952d51da1ca0b06b55f3571b1faffa39"></a>
string&#160;</td><td class="memItemRight" valign="bottom"><b>USER</b> = &quot;&quot;</td></tr>
<tr class="separator:a952d51da1ca0b06b55f3571b1faffa39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affb73d162b64929cb56e06537904ade1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="affb73d162b64929cb56e06537904ade1"></a>
string&#160;</td><td class="memItemRight" valign="bottom"><b>PSW</b> = &quot;&quot;</td></tr>
<tr class="separator:affb73d162b64929cb56e06537904ade1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><pre class="fragment">SequoiaDB Client Driver

The client support interfaces to connect to SequoiaDB.
In order to connect to SequoiaDB, you need use the class first.
And you should make sure the instance of it released when you don't use it
any more.

All operation need deal with the error code returned first, if it has. 
Every error code is not SDB_OK(or 0), it means something error has appeared,
and user should deal with it according the meaning of error code printed.

@version: execute to get version
          &gt;&gt;&gt; import pysequoiadb
          &gt;&gt;&gt; print pysequoiadb.get_version()

@notice : The dict of built-in Python is hashed and non-ordered. so the
          element in dict may not the order we make it. we make a dict and
          print it like this:
          ...
          &gt;&gt;&gt; a = {"avg_age":24, "major":"computer science"}
          &gt;&gt;&gt; a
          &gt;&gt;&gt; {'major': 'computer science', 'avg_age': 24}
          ...
          the elements order it is not we make it!!
          therefore, we use bson.SON to make the order-sensitive dict if the
          order is important such as operations in "$sort", "$group",
          "split_by_condition", "aggregate","create_collection"...
          In every scene which the order is important, please make it using
          bson.SON and list. It is a subclass of built-in dict
          and order-sensitive
</pre> </div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad526e7d3831d5d4361e43520e1141edb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.__init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>host</em> = <code>None</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>service</em> = <code>None</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>user</em> = <code>None</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>psw</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">initialize when product a object.
 
   it will try to connect to SequoiaDB using host and port given,
   localhost and 11810 are the default value of host and port,
   user and password are "". 

Parameters:
   Name    Type      Info:
   host    str       The hostname or IP address of dbserver,
                     if None, "localhost" will be insteaded
   service str/int   The service name or port number of dbserver,
                     if None, "localhost" will be insteaded
   user    str       The user name to access to database,
                     if None, "" will be insteaded
   psw     str       The user password to access to database,
                     if None, "" will be insteaded
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ac115d9757d8cc000e3354fe7fda48e51"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.__del__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">release resource when del called.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a60c7707597e8804216925b302262ec9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.__getattr__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">support client.cs to access to collection space.

   eg.
   cc = client()
   cs = cc.test # access to collection space named 'test'

   and we should pass '__members__' and '__methods__',
   becasue dir(cc) will invoke __getattr__("__members__") and
   __getattr__("__methods__").

   if success, a collection object will be returned, or None.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="aaa084932122b32e717986985d0967c14"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.__getitem__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">support [] to access to collection space.

   eg.
   cc = client()
   cs = cc['test'] # access to collection space named 'test'.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="abaedee49eee7c9947806e00acfc76f8f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.backup_offline </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>options</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Backup the whole database or specifed replica group.

Parameters:
   Name      Type  Info:
   options   dict  Contains a series of backup configuration
                   infomations. Backup the whole cluster if None. 
                   The "options" contains 5 options as below. 
                   All the elements in options are optional. 
                   eg:
                   { "GroupName":["rgName1", "rgName2"], 
                     "Path":"/opt/sequoiadb/backup",
                     "Name":"backupName", "Description":description,
                     "EnsureInc":true, "OverWrite":true }
                   See Info as below.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
   GroupName   :  The replica groups which to be backuped.
   Path        :  The backup path, if not assign, use the backup path assigned in configuration file.
   Name        :  The name for the backup.
   Description :  The description for the backup.
   EnsureInc   :  Whether excute increment synchronization,
                  default to be false.
   OverWrite   :  Whether overwrite the old backup file,
                  default to be false.
</pre> 
</div>
</div>
<a class="anchor" id="a3a3a3e4e5392bc17cfd0b25abca86a9d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.cancel_task </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>task_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>is_async</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Cancel the specified task.

Parameters:
   Name         Type     Info:
   task_id      long     The task id to be canceled.
   is_async     bool     The operation "cancel task" is async or not,
                         "True" for async, "False" for sync.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="aac17be205eaf4e1f9abd7afd7088d999"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.close_all_cursors </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Close all the cursors in current thread, we can't use those cursors to 
get data again.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a86b9d348b3c506eb35de350669dad7a2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.connect </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>service</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">connect to specified database

Parameters:
   Name        Type     Info:
   host        str      The host name or IP address of database server.
   service     int/str  The servicename of database server.
   **kwargs             Useful options are below:
   -  user     str      The user name to access to database.
   -  password str      The user password to access to database.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a94ed87aee00da0ee5d01e020c79c363f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.connect_to_hosts </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>hosts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">try to connect a host in specified hosts

Parameters:
   Name        Type  Info:
   hosts       list  The list contains hosts.
                     eg.
                     [ {'host':'localhost',     'service':'11810'},
                       {'host':'192.168.10.30', 'service':'11810'},
                       {'host':'192.168.20.63', 'service':11810}, ]
   **kwargs          Useful options are below:
   -  user     str   The user name to access to database.
   -  password str   The user password to access to database.
   -  policy   str   The policy of select hosts. it must be string
                     of 'random' or 'one_by_one'.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a548cc40bec6b5722d367458912ad23bb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.create_collection_space </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cs_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>page_size</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Create collection space with specified pagesize.

Parameters:
   Name         Type     Info:
   cs_name      str      The name of collection space to be created.
   page_size    int      The page size of collection space. See Info
                         as below.
Return values:
   collection space object created.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
   valid page size value:
               0  :  64k default page size
            4096  :  4k
            8192  :  8k
           16384  :  16k
           32768  :  32k
           65536  :  64k
</pre> 
</div>
</div>
<a class="anchor" id="ad7f610fd0eb59b86297b4e266d14b47f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.create_procedure </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Create a store procedures

Parameters:
   Name         Type     Info:
   code         str      The JS code of store procedures.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a1dbbd95e0e6825654fe396bc3df898fa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.create_replica_cata_group </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>service</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>configure</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Create a catalog replica group.

Parameters:
   Name         Type     Info:
   host         str      The hostname for the catalog replica group.
   service      str      The servicename for the catalog replica group.
   path         str      The path for the catalog replica group.
   configure    dict     The configurations for the catalog replica group.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a7062fc86f4bc0b8ce0254bc8e6c20642"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.create_replica_group </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>group_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Create the specified replica group.

Parameters:
   Name        Type     Info:
   group_name  str      The name of replica group to be created.
Return values:
   the replicagroup object created.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a57ae3dc886d7c24997b030e8c1e8d17a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.create_user </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>psw</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Add an user in current database.

Parameters:
   Name         Type     Info:
   name         str      The name of user to be created.
   psw          str      The password of user to be created.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a55386e002908c9be26d7ec1255198893"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.disconnect </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">disconnect to current server.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ad547f29394c428ec463b073f7e3f504f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.drop_collection_space </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cs_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Remove the specified collection space.

Parameters:
   Name         Type     Info:
   cs_name      str      The name of collection space to be dropped
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a01b4ee964bce6f1ef569cf172e3e221c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.eval_procedure </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Eval a func.

Parameters:
   Name         Type     Info:
   name         str      The name of store procedure.
Return values:
   cursor object of current eval.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a05b8411fb1999b6a9c0e169cbbc962e0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.exec_sql </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>sql</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Executing SQL command.

Parameters:
   Name         Type     Info:
   sql          str      The SQL command.
Return values:
   a cursor object of matching documents.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a6c90cd66fb624dc4011b5550de6c04bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.exec_update </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>sql</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Executing SQL command for updating.

Parameters:
   Name         Type     Info:
   sql          str      The SQL command.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a38fd053ad7658714ccf5fab3979abc38"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.flush_configure </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Flush the options to configure file.
Parameters:
   Name      Type  Info:
   options   dict  The configure infomation, pass {"Global":true} or
                   {"Global":false} In cluster environment, passing
                   {"Global":true} will flush data's and catalog's 
                   configuration file, while passing {"Global":false} will 
                   flush coord's configuration file. In stand-alone
                   environment, both them have the same behaviour.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a8ac5781599c778c7b46284848747403b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.get_collection </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cl_full_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the specified collection.

Parameters:
   Name         Type     Info:
   cl_full_name str      The full name of collection
Return values:
   a collection object of query.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="afffd4b8c52b3afb43a672a17b75ce750"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.get_collection_space </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cs_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the specified collection space.

Parameters:
   Name         Type     Info:
   cs_name      str      The name of collection space.
Return values:
   a collection space object of query.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="aa46aadcceaa60e051232b5f11e8e2fa6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.get_list </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>list_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the informations of specified type.

Parameters:
   Name        Type     Info:
   list_type   int      Type of list option, see Info as below.
   **kwargs             Useful options are below
   - condition dict     The matching rule, match all the documents
                        if None.
   - selector  dict     The selective rule, return the whole
                        documents if None.
   - order_by  dict     The ordered rule, never sort if None.
Return values:
   a cursor object of query
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
   list type:
    0          : Get all contexts list
    1          : Get contexts list for the current session
    2          : Get all sessions list
    3          : Get the current session
    4          : Get all collections list
    5          : Get all collecion spaces' list
    6          : Get storage units list
    7          : Get replicaGroup list ( only applicable in sharding env )
    8          : Get store procedure list
    9          : Get domains list
    10         : Get tasks list
    11         : Get collection space list in domain
    12         : Get collection list in domain
</pre> 
</div>
</div>
<a class="anchor" id="ace39918a643349f7ec885e48fb6619ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.get_replica_group_by_id </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the specified replica group of specified group id.

Parameters:
   Name       Type     Info:
   id         str      The id of replica group.
Return values:
   the replicagroup object of query.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a73978533e8110aca43ff5dae5c50158f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.get_replica_group_by_name </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>group_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the specified replica group of specified group name.

Parameters:
   Name         Type     Info:
   group_name   str      The name of replica group.
Return values:
   the replicagroup object of query.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a5b4a3397fcc672f16e4f246a11f1f043"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.get_snapshot </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>snap_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the snapshots of specified type.

Parameters:
   Name           Type  Info:
   snap_typr      str   The type of snapshot, see Info as below
   **kwargs             Useful options are below
   - condition    dict  The matching rule, match all the documents
                        if not provided.
   - selector     dict  The selective rule, return the whole
                        document if not provided.
   - order_by     dict  The ordered rule, result set is unordered
                        if not provided.
Return values:
   a cursor object of query
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
  snapshot type:
      0     : Get all contexts' snapshot
      1     : Get the current context's snapshot
      2     : Get all sessions' snapshot
      3     : Get the current session's snapshot
      4     : Get the collections' snapshot
      5     : Get the collection spaces' snapshot
      6     : Get database's snapshot
      7     : Get system's snapshot
      8     : Get catalog's snapshot
</pre> 
</div>
</div>
<a class="anchor" id="a7c223a7d1daf0fd06d3615d4d337a9fa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.is_valid </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Judge whether the connection is valid.

Return values:
   bool 
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a3739b3eb603c359703a9b363f3840b71"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.list_backup </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">List the backups.

Parameters:
   Name        Type     Info:
   options     dict     Contains configuration infomations for remove
                         backups, list all the backups in the
                         default backup path if None. 
                         The "options" contains 3 options as below. 
                         All the elements in options are optional. 
                         eg:
                         { "GroupName":["rgame1", "rgName2"], 
                           "Path":"/opt/sequoiadb/backup",
                           "Name":"backupName" }
                         See Info as below.
   **kwargs             Useful option arw below
   - condition dict     The matching rule, return all the documents
                        if None.
   - selector  dict     The selective rule, return the whole document
                        if None.
   - order_by  dict     The ordered rule, never sort if None.
Return values:
   a cursor object of backup list
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
   GroupName   :  Assign the backups of specifed replica groups to be list.
   Path        :  Assign the backups in specifed path to be list,
                  if not assign, use the backup path asigned in the
                  configuration file.
   Name        :  Assign the backups with specifed name to be list.
</pre> 
</div>
</div>
<a class="anchor" id="a0d1f928c6daa64e4ecd5fcb5b5522ca2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.list_collection_spaces </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">List all collection space of current database, include temporary
   collection space.

Return values:
   a cursor object of collection spaces.
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a289ea32fe644eceb22f6307b3fd07774"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.list_collections </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">List all collections in current database.

Return values:
   a cursor object of collection.
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a88d894f9bb1629581ea2394e763f1c4f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.list_procedures </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>condition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">List store procedures.

Parameters:
   Name         Type     Info:
   condition    dict     The condition of list.
Return values:
   an cursor object of result
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a530ab422e01272850b8d24e642356c23"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.list_replica_groups </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">List all replica groups of current database.

Return values:
   a cursor object of replication groups.
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a141706cc810d9b24625abf8a8b450075"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.list_task </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">List the tasks.

Parameters:
   Name           Type     Info:
   **kwargs                Useful options are below
   - condition    dict     The matching rule, return all the documents
                           if None.
   - selector     dict     The selective rule, return the whole
                           document if None.
   - order_by     dict     The ordered rule, never sort if None.
                           bson.SON may need if it is order-sensitive.
                           eg.
                           bson.SON([("name",-1), ("age":1)]) it will
                           be ordered descending by 'name' first, and
                           be ordered ascending by 'age'
   - hint         dict     The hint, automatically match the optimal
                           hint if None.
Return values:
   a cursor object of task list
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ae0220a5e47c7a7736d5226727b971da7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.remove_backup </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Remove the backups

Parameters:
   Name      Type  Info:
   options   dict  Contains configuration infomations for remove
                   backups, remove all the backups in the default
                   backup path if null. The "options" contains 3
                   options as below. All the elements in options are
                   optional.
                   eg:
                   { "GroupName":["rgName1", "rgName2"],
                     "Path":"/opt/sequoiadb/backup",
                     "Name":"backupName" }
                   See Info as below.
Return values:
   an cursor object of result
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
   GroupName   : Assign the backups of specifed replica groups to be
                 remove.
   Path        : Assign the backups in specifed path to be remove, if not
                 assign, use the backup path asigned in the configuration
                 file.
   Name        : Assign the backups with specifed name to be remove.
</pre> 
</div>
</div>
<a class="anchor" id="a4f0d379ad4934428704d8e895920f3bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.remove_procedure </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Remove a store procedures.
     
Parameters:
   Name         Type     Info:
   name         str      The name of store procedure.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a8bb16475a5920aca0aac4e0c2b3cd2ff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.remove_replica_group </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>group_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Remove the specified replica group.

Parameters:
   Name         Type     Info:
   group_name   str      The name of replica group to be removed
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a32387dcc83e8154c256d9fe0e296e569"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.remove_user </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>psw</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Remove the spacified user from current database.

Parameters:
   Name     Type     Info:
   name     str      The name of user to be removed.
   psw      str      The password of user to be removed.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a802271bfd2af0d83a51c00f32e82f1b5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.reset_snapshot </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>condition</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Reset the snapshot.

Parameters:
   Name         Type     Info:
   condition    dict     The matching rule, usually specifies the
                         node in sharding environment, in standalone
                         mode, this option is ignored.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a294103e4431a7fb950c7377c7c46d3b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.set_session_attri </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>options</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Set the attributes of the session.

Parameters:
   Name         Type     Info:
   options      dict     The configuration options for session.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ac3441697fa95c393e8ffe95253a78f86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.transaction_begin </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Transaction begin.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a875d2fab73379843f13341cc072f79cc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.transaction_commit </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Transaction commit.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="af8b04bbb798ca76b1a4afe225adf1dbd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.transaction_rollback </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Transaction rollback

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a441c693adb76d50b7f68423aa2a1ad33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.client.client.wait_task </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>task_ids</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Wait the tasks to finish.

Parameters:
   Name         Type     Info:
   task_ids     list     The list of task id.
   num          int      The number of task id.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/SequoiaDB/trunk/driver/python/pysequoiadb/client.py</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Oct 31 2014 13:13:33 for SequoiaDB by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.7
</small></address>
</body>
</html>
