<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="developement_application_C">
  <title>BSON Interface to C</title>
  <body>
    <p>BSON the binary format of JSON. Through recording every object or element, nested element an
      dthe type and length of array,  elements can be rapidly an efficiently found. So in C
      applications, we use BSON interface provided by authority to store data. Different from common
      JSON, BSON supports more data types in order to meet the all kinds of requirements of  C.
      SequoiaDB support data types including 8-byte double float, string, nested object, nested
      array, object ID (Each rrecord in database has a unique ID), bool, data, NULL, regex, 4-byte
      integer (INT), timeline, 8-byte integer, etc. The definition of these types can be found in
      bson_type in a file called bson.h.</p>
    <p>When users use bson object, they mainly create and read object .</p>
    <section>
    <title> Create Object</title><p>In general, the process of generation of a BSON object contains 3 steps:</p><p> 1) Create object (bson_create ; bson_init) </p><p> 2) Use object </p><p> 3) Clear object (bson_dispose ; bson_destory)</p>
      <ul>
        <li><p>Create a simple BSON object
            {age:20}ã€‚<codeblock>INT32 rc = SDB_OK;
bson obj;
bson_init(&amp;obj);
bson_appent_int(obj,"age",20);
if ( bson_finish(obj) != SDB_OK )
printf("Error.") ;
bson_destory(obj);</codeblock></p></li>
        <li>Create a complex BSON object
          <codeblock>/* Create a object contianing {name:"tom",colors:["red","blue","green"], address: {city:"Toronto, province: "Ontario"}} */
bson_iterator bi ;
bson *newobj = bson_create () ;
bson_append_string ( newobj, "name", "tom" ) ;
bson_append_start_object ( newobj, "address" ) ;
bson_append_string ( newobj, "city", "Toronto" ) ;
bson_append_string ( newobj, "provice", "Ontario" ) ;
bson_append_start_array(newobj,"colors");
bson_appent_string(newobj,"0","red");
bson_appent_string(newobj,"1","blue");
bson_appent_string(newobj,"2","green");
bson_append_finish_object ( newobj ) ;
if( bson_finish ( newobj ) != BSON_OK )
   printf("Error.") ;</codeblock></li>
      </ul>
    </section>
    <section>
      <title> Read Object</title>
      <p>We use<i> bson_iterator</i>  to read BSON object. In a complete example, the function
          <i>bson_print_raw </i> can be used to rad data. We initiate the BSON object and go through
        each element with the function called <i>bson_iterator_next.</i>
      </p>
      <codeblock>bson_iterator i[1] ;
bson_type type ;
const char * key;

bson_iterator_init(i, newobj) ;

type = bson_iterator_next (i);
key = bson_iterator_key (i);

printf( "Type: %d, Key: %s\n", type, key) ;</codeblock>
      <p>For every bson_iterator, the function <i>bson_iterator_type </i> can return the type of it.
        Functions like <i>bson_iterator_string </i> return values in corresponding type.</p>
      <codeblock>printf( "Value: %s, bson_iterator_string(i)) ;</codeblock>
      <ul>
        <li>      <p>When we go through consecutive BSON object elements, we can directly get the name of a
            element with the function <i>bson_find </i>. For example, we can ge the "name" value of
            a element in this sample.</p>
          <codeblock>bson_iterator i[1] ,sub[i] ;
bson_type type ;

bson_find ( i, newobj, "name" )</codeblock>
        </li>
        <li> Read array element or nested objects,as <i>"address"</i> is a nested object,it need to
          special iterate.Getting value of <i>"address"</i> at first,then init a new BSON
            iterator:<codeblock>type = bson_find(i,newobj,"address");
bson_iterator_subiterator(i,sub);</codeblock><p>The
            method <i>bson_iterator_subiterator</i> inits interator <i>sub</i>,and points to the
            beginning of sub-objects,then it can iterate all the elements in the <i>sub</i> until
            the end of sub-objects.</p></li>
      </ul>
      
    
      

    </section>
  </body>
</topic>
