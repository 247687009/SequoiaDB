
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en-us" xml:lang="en-us">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="copyright" content="(C) Copyright 2005"/>
<meta name="DC.rights.owner" content="(C) Copyright 2005"/>
<meta name="DC.Type" content="topic"/>
<meta name="DC.Title" content="C Development Foundation"/>
<meta name="description" content="This section introduce the approach to run SequiaDB in C application. First, you should make sure that you have install. Please refer to the installation page for more about installation information. ..."/>
<meta name="DC.Relation" scheme="URI" content="../../../../developement/application/C/topics/c_en.html"/>
<meta name="DC.Format" content="XHTML"/>
<meta name="DC.Identifier" content="topic_y14_42s_wj"/>
<link rel="stylesheet" type="text/css" href="../../../../commonltr.css"/>
<link rel="stylesheet" type="text/css" href="../../../../assets/webhelp_topic.css"/>
<title>C Development Foundation</title>
<script type="text/javascript" src="../../../../assets/jquery-1.3.2.js"> </script><script type="text/javascript" src="../../../../assets/jquery-ui-1.8.2.custom.min.js"> </script><script type="text/javascript" src="../../../../assets/frames_redirect.js"> </script><script type="text/javascript"><!--
    var prefix = "../../../../../index.html";
    var ratingFile = "";
    redirectToToc(window.location.search);
    function highlightSearchTerm(){
        if(parent.termsToHighlight != null){
        // highlight each term in the content view  
          for(i = 0 ; i < parent.termsToHighlight.length ; i++){        
              $('*', window.parent.frames[1].document).highlight(parent.termsToHighlight[i]);
          }
        }
    }
//--></script></head>
<body onload="highlightSearchTerm()" id="topic_y14_42s_wj"><a name="topic_y14_42s_wj"><!-- --></a>
<table class="nav"><tbody><tr><td><div class="navheader"><span class="frames" onclick="redirectFrames(location.pathname)"><script type="text/javascript"><!--
  if (parent.window.location.pathname == window.location.pathname ) document.write('With Frames');                    
                    --></script></span><a class="link" href="../../../../developement/application/C/topics/c_en.html" title="C Driver"><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">C Driver</span></a>  </div></td><td width="50%"><a class="navheader_parent_path" href="../../topics/application_en.html" title="SequoiaDB Application Development">SequoiaDB Application Development</a> / <a class="navheader_parent_path" href="../../../../developement/application/C/topics/c_en.html" title="C Driver">C Driver</a></td></tr></tbody></table>

  <h1 class="title topictitle1">C Development Foundation</h1>

  <div class="body">
    <p class="p">This section introduce the approach to run SequiaDB in C application. First, you should make
       sure that you have install. Please refer to the <a class="xref" href="../../../../installation/server_installation/topics/server_installation_en.html">installation page for more about
          installation information.</a></p>

    <div class="section"><h2 class="title sectiontitle">Edit client code</h2>
    <p class="p">For the purpose of simpleness, the following sample is not complete code. Please get complete
            source code in the path "/sequoiadb/client/samples/C".</p>

    <ul class="ul">
      <li class="li">Connecting Database<p class="p">There is a complete client file called "connect.c" to show how to
                  connect to database in a C applicaiton. The file includes a head file called
                  "client.h".</p>
<pre class="pre codeblock">#include &lt;stdio.h&gt;  
#include "client.h"

// Display Syntax Error
void displaySyntax ( CHAR *pCommand )
{
   printf ( "Syntax: %s&lt;hostname&gt; &lt;servicename&gt; &lt;username&gt; &lt;password&gt;"
            OSS_NEWLINE, pCommand ) ;
}

INT32 main ( INT32 argc, CHAR **argv )
{
   // define a connecion handle; use to connect to database
   sdbConnectionHandle connection    = 0 ;
   INT32 rc = SDB_OK ;

   // verify syntax
   if ( 5 != argc )
   {
      displaySyntax ( (CHAR*)argv[0] ) ;
      exit ( 0 ) ;
   }

   // read argument
   CHAR *pHostName = (CHAR*)argv[1] ;
   CHAR *pServiceName = (CHAR*)argv[2] ;
   CHAR *pUsr = (CHAR*)argv[3] ;
   CHAR *pPasswd = (CHAR*)argv[4] ;

   // connect to database
   rc = sdbConnect ( pHostName, pServiceName, pUsr, pPasswd, &amp;connection ) ;
   if( rc!=SDB_OK )
   {
      printf("Fail to connet to database, rc = %d" OSS_NEWLINE, rc ) ;
      goto error ;
   }

done:
   // disconnect from database
   sdbDisconnect ( connection ) ;
   // release connection
   sdbReleaseConnection ( connection ) ;
   return 0 ;
error:
   goto done ;
   }</pre>
<p class="p">In
                  Linux we can compile and link to dynamically linked librarie file called
                  "libsdbc.so" as follow:</p>
<pre class="pre codeblock">$gcc -o connect connect.c -I /<em class="ph i">path_to</em>/C/include -lsdbc -L/<em class="ph i">path-to</em>/client/C/lib
$ ./connect localhost 11810 "" ""
connect success!</pre>
<div class="note note"><span class="notetitle">Note:</span> 
                  <p class="p">This sample link to the port of 11810 of local database. It log in with null
                     user name and null password. Users need to configurate parameters according to
                     their own situation. But if database has created a user, it can connect to
                     database with it and its password.</p>

               </div>
</li>

      <li class="li">Inserting Data<p class="p">SequoiaDB stores data in the format of BSON. BSON is a binary object
                  similar to JSON. In order to store data, we should create a BSON object. The
                  following sample insert the record {name:"Tom",age:24} into a
               collection:</p>
<pre class="pre codeblock">// Firstly, a BSON object is created.
INT32 rc  = SDB_OK ;
bson obj ;
bson_init( &amp;obj ) ;
bson_append_string( &amp;obj, "name", "tom" ) ;
bson_append_int( &amp;obj, "age", 24 ) ;
rc = bson_finish( &amp;obj ) ;
if ( rc != SDB_OK )
printf("Error.");
// Secondly, insert it into a collection.
dbInsert ( collection, &amp;obj ) ;</pre>
</li>

      <li class="li">Query<div class="p"> In a query, a cursor handle is used to store the result set of a query. You can
                  get results by manipulating the cursor. This sample uses the <em class="ph i">sdbNext</em>
                  interface of cursor manipulation to get one record in the result set.
                  <pre class="pre codeblock">   // Define a cursor handle.
   dbCursorHandle cursor    = 0 ;
   …
   // Search for all records and put the results in the cursor handle.
   sdbQuery(collection, NULL, NULL, NULL, NULL, 0, -1, &amp;cursor ) ;
   // Show every record in cursor.
   bson_init(obj);
   while( !( rc=sdbNext( cursor, &amp;obj ) ) )
   {
      bson_print( &amp;obj ) ;
      bson_destroy(&amp;obj) ;
      bson_init(&amp;obj);
   }
   bson_destroy(obj) ;</pre>
</div>
</li>

      <li class="li">Index<div class="p">Here, we create an index in the collection specified by the collection handle
                     <em class="ph i">collection</em> . It is in ascending order on "name" and descending order on
                  "age".<pre class="pre codeblock">   #define INDEX_NAME "index"
   …
   // Firstly we create a bson that contains the information of the index.
   bson_init( &amp;obj ) ;
   bson_append_int( &amp;obj, "name", 1 ) ;
   bson_append_int( &amp;obj, "age", -1 ) ;
   rc = bson_finish( &amp;obj ) ;
   if ( rc != SDB_OK )
printf("Error.");
   // Create an index with the BOSN object.
   sdbCreateIndex ( collection, &amp;obj, INDEX_NAME, FALSE, FALSE ) ;
   bson_destroy ( &amp;obj ) ;   </pre>
</div>
</li>

      <li class="li">Updating data<p class="p">Here, we create an index in the collection specified by the collection
                  handle <em class="ph i">collection</em> This sample doesn't contain any matching condition, so it
                  will update all the records in the
                  collection.</p>
<pre class="pre codeblock">   // Create a BSON object that contains updating rules
   bson_init( &amp;rule ) ;
   bson_append_start_object ( &amp;rule, "$set" ) ;
   bson_append_int ( &amp;rule, "age", 19 ) ;
   bson_append_finish_object ( &amp;rule ) ;
   rc = bson_finish ( &amp;rule ) ;
   if ( rc != SDB_OK )
printf("Error.");
	 // Print updating rule.
   bson_print( &amp;rule ) ;
   // Update records.
   sdbUpdate( collection, &amp;rule, NULL, NULL ) ;
   bson_destroy(&amp;rule);</pre>
<p class="p">Here,as
                  no record matching conditions have specified,then this example will update all
                  records in the collection which collection handle specified.</p>
</li>

    </ul>

    </div>

     <div class="section"><h2 class="title sectiontitle">Cluster Operations </h2>
        
        <ul class="ul">
           <li class="li">ReplicaSet Operations <div class="p">ReplicaSet Operations contains creating
                  ReplicaSets(sdbCreateShard)、getting ReplicaSet handles(sdbGetShard)、starting
                  ReplicaSet(sdbStartShard) and stopping ReplicaSet(sdbStopShard). The following
                  shows the ReplicaSet Operations, and real application should include error
                  detecting ,etc.
                  <pre class="pre codeblock">// define a ReplicaSet Handle
   sdbShardHandle shard   = 0 ;
   …
// create a catalog ReplicaSet at first
   sdbCreateCataShard ( connection, HOST_NAME, SERVICE_NAME,
                               CATALOG_SET_PATH , NULL ) ;
// sleep 5s to wait starting catalog ReplicaSet and electing master and slave.
   sleep( 5 ) ;
// create data ReplicaSet
   sdbCreateShard ( connection, GROUP_NAME, &amp;rg ) ;
 
// create data nodes
   sdbCreateNode ( rd, HOST_NAME1, SERVICE_NAME1, DATABASE_PATH1, NULL ) ;
// start ReplicaSet
   sdbStartShard( shard ) ;</pre>
</div>
</li>

           <li class="li">Data Node Operations <div class="p">Data Node Operations contains create data
                  node(sdbCreateNode)、get master data node(sdbGetNodeMaster)、get slave data
                  node(sdbGetNodeSlave)、start data node (sdbStartNode) and stop data
                  node(sdbStopNode), etc. The following shows the Data Node Operations, and real
                  application should include error detecting, etc.
                  <pre class="pre codeblock">   // define a data node handle 
   sdbNodeHandle masternode   = 0 ;
   sdbNodeHandle slavenode    = 0 ;
   …
   // sleep 10s to wait starting data ReplicaSet and electing master and slave
   sleep( 10 ) ;

   //get master data node
   sdbGetNodeMaster ( shard, &amp;masternode ) ;
   //get slave data node
   sdbGetNodeSlave ( shard, &amp;slavenode ) ;         </pre>
</div>

            </li>

        </ul>

     </div>

  </div>

<div class="related-links"/>
<div class="navfooter"><a class="link" href="../../../../developement/application/C/topics/c_en.html" title="C Driver"><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">C Driver</span></a>  <script type="text/javascript"><!--         
    function expand(){
        parent.tocwin.expandToTopic(window.location.href, this.getAttribute('href'));
    }
    var aArray = document.getElementsByTagName('a');
    var i;
    for (i = 0; i< aArray.length; i++){
      aArray[i].onclick = expand;
    }
//--></script></div><div class="footer"><a href="http://www.sequoiadb.com" target="_blank"><img src="../../../../assets/images/sequoiadb_logo.png" alt="SequoiaDB"/></a>SequoiaDB Version 1.11
          
    </div>
</body>
</html>