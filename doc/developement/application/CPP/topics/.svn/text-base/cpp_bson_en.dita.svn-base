<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_mjr_yzy_fm">
  <title>BSON Interface to C++</title>
  <body>
    <section><title>C++ BSON main categories</title><p>C++ BSON uses four categories:</p>
      <p><b>bson::BSONObj</b>: Creating BSONObj object.</p>
      <p><b>bson::BSONElement</b>: BSONObj object consists BSONElement object, namely BSONElement object field or element BSONObj object, which is the key right.</p>
      <p><b>bson::BSONObjBuilder</b>: BSONObjBuilder BSONObj used to instantiate the object.</p>
      <p><b>bson::BSONObjlterator</b>: BSONObjlterator used to rtaverse BSONObj object elements.</p>
      Bson namespace type of these classes are defined as follows:
      <p><b>typedef bson::BSONElement be</b>; </p>
      <p><b>typedef bson::BSONObj bo</b>;</p>
      <p><b>typedef bson::BSONObjBuilder bob</b>;</p>
      <p>In addition, you can use the bo::iterator instead of BSONObjlterator. </p></section>
    <section>
      <title>Create an objcet</title>
      <p>The following describes how to create a simple to use CPP BSON instance. For details, see <xref href="..\..\..\..\bsoncpp\html\index.html" format="html">C++ BSON API</xref></p>
      <ul>
        <li>Use BSONObject, BSONObjBuilder builder create an object.
          <codeblock>#include "client.hpp"
â€¦
using namespace bson ;
BSONObj obj ;
BSONObjBuilder b ;

b.append("name","sam") ;
b.append("age","24") ;
obj = b.obj() ;
or
obj = BSONObjBuilder().genOID().append("name","sam").append("age",24).obj() ;</codeblock><p>Further, the method may be used to establish the data flow BSONObj lbject.</p>
          <codeblock>BSONObj obj ;
BSONObjBuilder b ;
b&lt;&lt;"name"&lt;&lt;"sam"&lt;&lt;"age"&lt;&lt;"24" ;
obj = b.obj() ;</codeblock></li>
        <li>Create an object using a macro BSON<p>C++ BSON defined also defines a BSON macro, you can use it to build BSONObj objects quickly.</p>
          <codeblock>BSONObj obj ;
// int
obj = BSON( "a"&lt;&lt;1 ) ; 
// float
obj = BSON( "b"&lt;&lt;3.14159265359 ) ; 
// string
obj = BSON( "foo"&lt;&lt;"bar" ) ; 
// OID
obj = BSON( GENOID ) ; 
// bool
obj = BSON( "flag"&lt;&lt;true"ret"&lt;&lt;false ) ;
// object
obj = BSON( "d"&lt;&lt;BSON("e"&lt;&lt;"hi!") ) ; 
// array
obj = BSON( "phone" &lt;&lt; BSON_ARRAY( "13800138123" &lt;&lt; "13800138124" ) ) ;
// others, less then, greater then, etc
obj = BSON( "g"&lt;&lt;LT&lt;&lt;99 ) ; </codeblock></li>
        <li>Interface to create an object using fromjson.<p>In addition, you can use fromjson.hpp the fromjson() to convert a string into BSONObj json object.</p>
          <codeblock>string s("{name:\"sam\"}") ;
fromjson ( s, obj ) ;
or
const char *r ="{
                   firstName:\"Sam\",\
                   lastName:\"Smith\",age:25,id:\"count\",\
                   address:{streetAddress: \"25 3ndStreet\",\
                   city:\"NewYork\",state:\"NY\",postalCode:\"10021\"},\
                   phoneNumber:[{type: \"home\",number:\"212555-1234\"}]}" ;
fromjson ( r, obj ) ;</codeblock>
        </li>
      </ul>
    </section>
  </body>
</topic>
