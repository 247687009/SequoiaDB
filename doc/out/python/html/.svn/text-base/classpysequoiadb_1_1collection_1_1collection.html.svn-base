<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.7"/>
<title>SequoiaDB: pysequoiadb.collection.collection Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SequoiaDB
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>pysequoiadb</b></li><li class="navelem"><b>collection</b></li><li class="navelem"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html">collection</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classpysequoiadb_1_1collection_1_1collection-members.html">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pysequoiadb.collection.collection Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for pysequoiadb.collection.collection:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classpysequoiadb_1_1collection_1_1collection.png" usemap="#pysequoiadb.collection.collection_map" alt=""/>
  <map id="pysequoiadb.collection.collection_map" name="pysequoiadb.collection.collection_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8a87def41209ebc66a5ef03a48b24615"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a8a87def41209ebc66a5ef03a48b24615">__init__</a></td></tr>
<tr class="separator:a8a87def41209ebc66a5ef03a48b24615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace60cd9d1d732701dae7eb072f6a4713"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#ace60cd9d1d732701dae7eb072f6a4713">__del__</a></td></tr>
<tr class="separator:ace60cd9d1d732701dae7eb072f6a4713"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dd2981e61bb49c0c19b4618a008f066"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1dd2981e61bb49c0c19b4618a008f066"></a>
def&#160;</td><td class="memItemRight" valign="bottom"><b>__repr__</b></td></tr>
<tr class="separator:a1dd2981e61bb49c0c19b4618a008f066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9db2fb7cdecd89f7803b70b7dbb857af"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a9db2fb7cdecd89f7803b70b7dbb857af">get_count</a></td></tr>
<tr class="separator:a9db2fb7cdecd89f7803b70b7dbb857af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af30e3211a841c241e1b663fa372cc933"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#af30e3211a841c241e1b663fa372cc933">split_by_condition</a></td></tr>
<tr class="separator:af30e3211a841c241e1b663fa372cc933"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a7213eb7185827851e25a08cf38aa86"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a1a7213eb7185827851e25a08cf38aa86">split_by_percent</a></td></tr>
<tr class="separator:a1a7213eb7185827851e25a08cf38aa86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a281e097877f1d9648b9cf023047b2058"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a281e097877f1d9648b9cf023047b2058">split_async_by_condition</a></td></tr>
<tr class="separator:a281e097877f1d9648b9cf023047b2058"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76b0cfab98b0b9682cb84609f55dbcac"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a76b0cfab98b0b9682cb84609f55dbcac">split_async_by_percent</a></td></tr>
<tr class="separator:a76b0cfab98b0b9682cb84609f55dbcac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7247593130f3d010603dccb5c5aad3ad"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a7247593130f3d010603dccb5c5aad3ad">bulk_insert</a></td></tr>
<tr class="separator:a7247593130f3d010603dccb5c5aad3ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45de13994a327bcbd72c8be22c562186"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a45de13994a327bcbd72c8be22c562186">insert</a></td></tr>
<tr class="separator:a45de13994a327bcbd72c8be22c562186"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f0c5e5459a94d73a5efca4eee0d964d"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a0f0c5e5459a94d73a5efca4eee0d964d">update</a></td></tr>
<tr class="separator:a0f0c5e5459a94d73a5efca4eee0d964d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac74afbca2b46f3f803f35228c6cd1b27"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#ac74afbca2b46f3f803f35228c6cd1b27">upsert</a></td></tr>
<tr class="separator:ac74afbca2b46f3f803f35228c6cd1b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08431e592c6ee801dd35bdb0c1961e55"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a08431e592c6ee801dd35bdb0c1961e55">delete</a></td></tr>
<tr class="separator:a08431e592c6ee801dd35bdb0c1961e55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a128fdbc0bcbf3d5729c869b9694ddc"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a6a128fdbc0bcbf3d5729c869b9694ddc">query</a></td></tr>
<tr class="separator:a6a128fdbc0bcbf3d5729c869b9694ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0823f6a6b07a2f7504880632366c82fe"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a0823f6a6b07a2f7504880632366c82fe">create_index</a></td></tr>
<tr class="separator:a0823f6a6b07a2f7504880632366c82fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29e5d38018207c10554198e0ef14db34"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a29e5d38018207c10554198e0ef14db34">get_indexes</a></td></tr>
<tr class="separator:a29e5d38018207c10554198e0ef14db34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13bf2ba51913f5a8ea18349b4228bc29"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a13bf2ba51913f5a8ea18349b4228bc29">drop_index</a></td></tr>
<tr class="separator:a13bf2ba51913f5a8ea18349b4228bc29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7fc61453b3e83ef2a51bb39e48533ed"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#ab7fc61453b3e83ef2a51bb39e48533ed">get_collection_name</a></td></tr>
<tr class="separator:ab7fc61453b3e83ef2a51bb39e48533ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a488b7137c6da483d7b5887341d1ac4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a4a488b7137c6da483d7b5887341d1ac4">get_cs_name</a></td></tr>
<tr class="separator:a4a488b7137c6da483d7b5887341d1ac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a175b3f35e6747924dd465dba07c4a679"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a175b3f35e6747924dd465dba07c4a679">get_full_name</a></td></tr>
<tr class="separator:a175b3f35e6747924dd465dba07c4a679"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb1ad419c09f99b7053724b27fd69795"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#acb1ad419c09f99b7053724b27fd69795">aggregate</a></td></tr>
<tr class="separator:acb1ad419c09f99b7053724b27fd69795"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76728ff0c3f96a62681e838b50858f45"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a76728ff0c3f96a62681e838b50858f45">get_query_meta</a></td></tr>
<tr class="separator:a76728ff0c3f96a62681e838b50858f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfb42a07a5fd91c726024c26ccb2e46e"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#adfb42a07a5fd91c726024c26ccb2e46e">attach_collection</a></td></tr>
<tr class="separator:adfb42a07a5fd91c726024c26ccb2e46e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59fe0f3be6f268362142980bc48973c7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a59fe0f3be6f268362142980bc48973c7">detach_collection</a></td></tr>
<tr class="separator:a59fe0f3be6f268362142980bc48973c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27b737239cfd58c864c012e7aff52f5f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a27b737239cfd58c864c012e7aff52f5f">create_lob</a></td></tr>
<tr class="separator:a27b737239cfd58c864c012e7aff52f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a4337ac0e2e0f9c7d82be3b33d3680f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a3a4337ac0e2e0f9c7d82be3b33d3680f">get_lob</a></td></tr>
<tr class="separator:a3a4337ac0e2e0f9c7d82be3b33d3680f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae29b71dbe335749bef2d8406b6ff2338"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#ae29b71dbe335749bef2d8406b6ff2338">remove_lob</a></td></tr>
<tr class="separator:ae29b71dbe335749bef2d8406b6ff2338"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c570b0f461fe6d407f470413e2ebb4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#ad7c570b0f461fe6d407f470413e2ebb4">list_lobs</a></td></tr>
<tr class="separator:ad7c570b0f461fe6d407f470413e2ebb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aa9dd355f9f4a2e40dd5ea139dbf42b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a6aa9dd355f9f4a2e40dd5ea139dbf42b">query_one</a></td></tr>
<tr class="separator:a6aa9dd355f9f4a2e40dd5ea139dbf42b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0421c5ab6b8534bd89a94e258d1684c4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpysequoiadb_1_1collection_1_1collection.html#a0421c5ab6b8534bd89a94e258d1684c4">explain</a></td></tr>
<tr class="separator:a0421c5ab6b8534bd89a94e258d1684c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><pre class="fragment">Collection for SequoiaDB

All operation need deal with the error code returned first, if it has. 
Every error code is not SDB_OK(or 0), it means something error has appeared,
and user should deal with it according the meaning of error code printed.

@version: execute to get version
          &gt;&gt;&gt; import pysequoiadb
          &gt;&gt;&gt; print pysequoiadb.get_version()

@notice : The dict of built-in Python is hashed and non-ordered. so the
          element in dict may not the order we make it. we make a dict and
          print it like this:
          ...
          &gt;&gt;&gt; a = {"avg_age":24, "major":"computer science"}
          &gt;&gt;&gt; a
          &gt;&gt;&gt; {'major': 'computer science', 'avg_age': 24}
          ...
          the elements order it is not we make it!!
          therefore, we use bson.SON to make the order-sensitive dict if the
          order is important such as operations in "$sort", "$group",
          "split_by_condition", "aggregate","create_collection"...
          In every scene which the order is important, please make it using
          bson.SON and list. It is a subclass of built-in dict
          and order-sensitive
</pre> </div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a8a87def41209ebc66a5ef03a48b24615"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.__init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">create a new collection.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ace60cd9d1d732701dae7eb072f6a4713"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.__del__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">delete a object existed.

Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="acb1ad419c09f99b7053724b27fd69795"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.aggregate </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>aggregate_options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Execute aggregate operation in specified collection.

Parameters:
   Name               Type       Info:
   aggregate_options  list/tuple The array of dict objects.
                                 bson.SON may need if the element is
                                 order-sensitive.
                                 eg.
                                 {'$sort':bson.SON([("name",-1), ("age":1)])}
                                 it will be ordered descending by 'name'
                                 first, and be ordered ascending by 'age'
Return values:
   a cursor object of result
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="adfb42a07a5fd91c726024c26ccb2e46e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.attach_collection </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>cl_full_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>options</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Attach the specified collection.

Parameters:
   Name            Type  Info:
   subcl_full_name str   The name fo the subcollection.
   options         dict  he low boudary and up boudary
                         eg: {"LowBound":{a:1},"UpBound":{a:100}}
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a7247593130f3d010603dccb5c5aad3ad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.bulk_insert </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>records</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Insert a bulk of record into current collection.

Parameters:
   Name        Type       Info:
   flags       int        0 or 1, see Info as below.
   records     list/tuple The list of inserted records.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Info:
   flags : 0 or 1. 
   0 : stop insertting when hit index key duplicate error
   1 : continue insertting records even though index key duplicate error hit
</pre> 
</div>
</div>
<a class="anchor" id="a0823f6a6b07a2f7504880632366c82fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.create_index </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>index_def</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>idx_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>is_unique</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>is_enforced</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Create the index in current collection.

Parameters:
   Name         Type  Info:
   index_def    dict  The dict object of index element.
                      e.g. {name:1, age:-1}
   idx_name     str   The index name.
   is_unique    bool  Whether the index elements are unique or not.
   is_enforced  bool  Whether the index is enforced unique This
                      element is meaningful when isUnique is set to
                      true.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a27b737239cfd58c864c012e7aff52f5f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.create_lob </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>oid</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">create lob.

Parameters:
   Name     Type           Info:
   oid      bson.ObjectId  Specified the oid of lob to be created,
                           if None, the oid is generated automatically
Return values:
   a lob object
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a08431e592c6ee801dd35bdb0c1961e55"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.delete </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Delete the matching documents in current collection.

Parameters:
   Name        Type  Info:
   **kwargs          Useful options are below
   - condition dict  The matching rule, delete all the documents
                     if not provided.
   - hint      dict  The hint, automatically match the optimal hint
                     if not provided
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a59fe0f3be6f268362142980bc48973c7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.detach_collection </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>sub_cl_full_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Dettach the specified collection.

Parameters:
   Name            Type  Info:
   subcl_full_name str   The name fo the subcollection.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a13bf2ba51913f5a8ea18349b4228bc29"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.drop_index </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>idx_name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">The index name.

Parameters:
   Name         Type  Info:
   idx_name     str   The index name.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a0421c5ab6b8534bd89a94e258d1684c4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.explain </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the matching documents in current collection.

Parameters:
   Name              Type     Info:
   **kwargs                   Useful options are below
   - condition       dict     The matching rule, update all the
                              documents if not provided.
   - selected        dict     The selective rule, return the whole
                              document if not provided.
   - order_by        dict     The ordered rule, result set is unordered
                              if not provided.
   - hint            dict     The hint, automatically match the optimal
                              hint if not provided.
   - num_to_skip     long     Skip the first numToSkip documents,
                              default is 0L.
   - num_to_return   long     Only return numToReturn documents,
                              default is -1L for returning
                              all results.
   - flag            int      
   - options         json     
Return values:
   a cursor object of query
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ab7fc61453b3e83ef2a51bb39e48533ed"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_collection_name </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the name of specified collection in current collection space.

Return values:
   The name of specified collection
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a9db2fb7cdecd89f7803b70b7dbb857af"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_count </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>condition</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the count of matching documents in current collection.

Parameters:
   Name         Type     Info:
   condition    dict     The matching rule, return the count of all
                         documents if None.
Return values:
   count of result
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a4a488b7137c6da483d7b5887341d1ac4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_cs_name </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the name of current collection space.

Return values:
   The name of current collection space
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a175b3f35e6747924dd465dba07c4a679"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_full_name </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the full name of specified collection in current collection space.

Return values:
   The full name of current collection
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a29e5d38018207c10554198e0ef14db34"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_indexes </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>idx_name</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get all of or one of the indexes in current collection.

Parameters:
   Name         Type  Info:
   idx_name     str   The index name, returns all of the indexes
                      if this parameter is None.
Return values:
   a cursor object of result
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a3a4337ac0e2e0f9c7d82be3b33d3680f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_lob </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>oid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">get the specified lob.

Parameters:
   Name     Type                 Info:
   oid      str/bson.ObjectId    The specified oid
Return values:
   a lob object
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a76728ff0c3f96a62681e838b50858f45"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.get_query_meta </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the index blocks' or data blocks' infomations for concurrent query.

Parameters:
   Name              Type     Info:
   **kwargs                   Useful options are below
   - condition       dict     The matching rule, return the whole range
                              of index blocks if not provided.
                              eg:{"age":{"$gt":25},"age":{"$lt":75}}.
   - order_by        dict     The ordered rule, result set is unordered
                              if not provided.bson.SON may need if it is
                              order-sensitive.
   - hint            dict     One of the indexs in current collection,
                              using default index to query if not
                              provided.
                              eg:{"":"ageIndex"}.
   - num_to_skip     long     Skip the first num_to_skip documents,
                              default is 0L.
   - num_to_return   long     Only return num_to_return documents,
                              default is -1L for returning all results.
Return values:
   a cursor object of query
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a45de13994a327bcbd72c8be22c562186"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.insert </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>record</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Insert a record into current collection.

Parameters:
   Name      Type    Info:
   records   dict    The inserted record.
Return values:
   ObjectId of record inserted
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ad7c570b0f461fe6d407f470413e2ebb4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.list_lobs </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">list all lobs.

Parameters:
   Name     Type                 Info:

Return values:
   a cursor object of query
Exceptions:
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a6a128fdbc0bcbf3d5729c869b9694ddc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.query </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get the matching documents in current collection.

Parameters:
   Name              Type     Info:
   **kwargs                   Useful options are below
   - condition       dict     The matching rule, update all the
                              documents if not provided.
   - selected        dict     The selective rule, return the whole
                              document if not provided.
   - order_by        dict     The ordered rule, result set is unordered
                              if not provided.
   - hint            dict     The hint, automatically match the optimal
                              hint if not provided.
   - num_to_skip     long     Skip the first numToSkip documents,
                              default is 0L.
   - num_to_return   long     Only return numToReturn documents,
                              default is -1L for returning
                              all results.
Return values:
   a cursor object of query
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a6aa9dd355f9f4a2e40dd5ea139dbf42b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.query_one </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Get one matching documents in current collection.

Parameters:
   Name              Type     Info:
   **kwargs                   Useful options are below
   - condition       dict     The matching rule, update all the
                              documents if not provided.
   - selected        dict     The selective rule, return the whole
                              document if not provided.
   - order_by        dict     The ordered rule, result set is unordered
                              if not provided.
   - hint            dict     The hint, automatically match the optimal
                              hint if not provided.
   - num_to_skip     long     Skip the first numToSkip documents,
                              default is 0L.
Return values:
   a record of json/dict
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="ae29b71dbe335749bef2d8406b6ff2338"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.remove_lob </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>oid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">remove lob.

Parameters:
   Name     Type                 Info:
   oid      str/bson.ObjectId    The oid of the lob to be remove.
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a281e097877f1d9648b9cf023047b2058"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.split_async_by_condition </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>source_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>target_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>split_condition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>split_end_condition</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Split the specified collection from source replica group to target
   replica group by range.

Parameters:
   Name                  Type  Info:
   source_group_name     str   The source replica group name.
   target_group_name     str   The target replica group name.
   split_condition       dict  The matching rule, return the count of
                               all documents if None.
   split_end_condition   dict  The split end condition or None.
                               eg:
                               If we create a collection with the 
                               option { ShardingKey:{"age":1},
                               ShardingType:"Hash",Partition:2^10 },
                               we can fill {age:30} as the
                               splitCondition, and fill {age:60} 
                               as the splitEndCondition. when split,
                               the target replica group will get the
                               records whose age's hash value are in
                               [30,60). If splitEndCondition is null,
                               they are in [30,max).
Return values:
   task id
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a76b0cfab98b0b9682cb84609f55dbcac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.split_async_by_percent </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>source_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>target_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>percent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Split the specified collection from source replica group to target
   replica group by percent.

Parameters:
   Name               Type     Info:
   source_group_name  str      The source replica group name.
   target_group_name  str      The target replica group name.
   percent                float    The split percent, Range:(0,100]
Return values:
   task id
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="af30e3211a841c241e1b663fa372cc933"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.split_by_condition </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>source_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>target_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>split_condition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>split_end_condition</em> = <code>None</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Split the specified collection from source replica group to target
   replica group by range.

Parameters:
   Name                  Type     Info:
   source_group_name     str      The source replica group name.
   target_group_name     str      The target replica group name.
   split_condition       dict     The matching rule, return the count
                                  of all documents if None.
   split_end_condition   dict     The split end condition or None.
                                  eg:
                                  If we create a collection with the 
                                  option { ShardingKey:{"age":1},
                                  ShardingType:"Hash",Partition:2^10 },
                                  we can fill {age:30} as the
                                  splitCondition, and fill {age:60} 
                                  as the splitEndCondition. when
                                  split, the target replica group
                                  will get the records whose age's
                                  hash value are in [30,60).
                                  If splitEndCondition is null, they
                                  are in [30,max).
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a1a7213eb7185827851e25a08cf38aa86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.split_by_percent </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>source_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>target_group_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>percent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Split the specified collection from source replica group to target
   replica group by percent.

Parameters:
   Name               Type     Info:
   source_group_name  str      The source replica group name.
   target_group_name  str      The target replica group name.
   percent                float    The split percent, Range:(0,100]
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
</pre> 
</div>
</div>
<a class="anchor" id="a0f0c5e5459a94d73a5efca4eee0d964d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.update </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>rule</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Update the matching documents in current collection.

Parameters:
   Name        Type     Info:
   rule        dict     The updating rule.
   **kwargs             Useful option are below
   - condition dict     The matching rule, update all the documents
                        if not provided.
   - hint      dict     The hint, automatically match the optimal hint
                        if not provided
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Note:
   It won't work to update the "ShardingKey" field, but the other fields
   take effect.
</pre> 
</div>
</div>
<a class="anchor" id="ac74afbca2b46f3f803f35228c6cd1b27"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pysequoiadb.collection.collection.upsert </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>rule</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>kwargs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<pre class="fragment">Update the matching documents in current collection, insert if
   no matching.

Parameters:
   Name        Type  Info:
   rule        dict  The updating rule.
   **kwargs          Useful options are below
   - condition dict  The matching rule, update all the documents
                     if not provided.
   - hint      dict  The hint, automatically match the optimal hint
                     if not provided
Exceptions:
   pysequoiadb.error.SDBTypeError
   pysequoiadb.error.SDBBaseError
Note:
   It won't work to update the "ShardingKey" field, but the other fields
   take effect.
</pre> 
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/SequoiaDB/trunk/driver/python/pysequoiadb/collection.py</li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Oct 31 2014 13:13:33 for SequoiaDB by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.7
</small></address>
</body>
</html>
