<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_hsx_hlt_zj">
  <title>C++ 开发基础</title>
  <body>
    <p>这里介绍如何使用 C++ 客户端驱动接口编写使用 SequoiaDB 数据库的程序。为了简单起见，下面的示例不全部是完整的代码，只起示例性作用。可到 /sequoiadb/client/samples/CPP 下获取相应的完整的代码。更多查看 <xref href="..\..\..\..\cpp\html\index.html" format="html">C++ API</xref></p>
  <section>
    <title>数据库操作</title>
    <ul>
      <li>连接数据库：Connecting
        <p>connect.cpp 演示如何连接到数据库。文件应当包含“client.hpp”头文件及使用命名空间 sdbclient。</p><codeblock>#include &lt;iostream>
#include "client.hpp"

using namespace std ;
using namespace sdbclient ;

// Display Syntax Error
void displaySyntax ( CHAR *pCommand ) ;

INT32 main ( INT32 argc, CHAR **argv )
{
   // verify syntax
   if ( 5 != argc )
   {
      displaySyntax ( (CHAR*)argv[0] ) ;
      exit ( 0 ) ;
   }
   // read argument
   CHAR *pHostName    = (CHAR*)argv[1] ;
   CHAR *pPort        = (CHAR*)argv[2] ;
   CHAR *pUsr         = (CHAR*)argv[3] ;
   CHAR *pPasswd      = (CHAR*)argv[4] ;

   // define local variable
   sdb connection ;
   INT32 rc = SDB_OK ;

   // connect to database
   rc = connection.connect ( pHostName, pPort, pUsr, pPasswd ) ;
   if( rc!=SDB_OK )
   {
      cout &lt;&lt;"Fail to connet to database, rc = "&lt;&lt;rc&lt;&lt;endl ;
      goto error ;
   }
   else
      cout&lt;&lt;"Connect success!"&lt;&lt;endl ;

  done:
     // disconnect from database
     connection.disconnect () ;
     return 0 ;
  error:
     goto done ;
}

// Display Syntax Error
void displaySyntax ( CHAR *pCommand )
{
   cout&lt;&lt;"Syntax:"&lt;&lt;pCommand" &lt;hostname> &lt;servicename>\
   usernamepassword"endl ;
   }</codeblock>
        <p>在 Linux下，可以如下编译及链接动态链接库文件 libsdbcpp.so:</p>
        <codeblock>$g++ -o connect connect.cpp -I &lt;PATH&gt;/sdbdriver/include -lsdbcpp -L &lt;PATH&gt;/sdbdriver/lib  
执行结果如下：
$ ./connect localhost 11810 "" ""
Connect success!</codeblock>
        <note>
          <p>本例程连接到本地数据库的11810端口，使用的是空的用户名和密码。用户需要根据自己的实际情况配置参数。譬如，./connect localhost 11810 "sequoiadb" "sequoiadb"。当数据库已经创建用户时，应该使用正确的用户及密码连接到数据库，否则连接失败。</p>
        </note>
      </li>
      <li>创建集合空间和集合<codeblock>// 首先，定义集合空间，集合对象。
sdbCollectionSpace collectionspace ;
sdbCollection collection ;
// 创建集合空间"foo"
rc = connection.createCollectionSpace ( "foo", SDB_PAGESIZE_4K, collectionspace ) ;
// 在新建立的集合空间中创建集合"bar"
rc = collectionspace.createCollection ( "bar", collection ) ;</codeblock>
        <p>以上创建了一个名字为“foo”的集合空间和一个名字为“bar”的集合，集合空间内的集合的数据页大小为4k。可根据实际情况选择不同大小的数据页。创建集合后，可对集合做增删改查等操作。</p>
        <note>
          <p>在创建集合“bar”时并没有附加分区，压缩等信息，详情请查阅 <xref href="..\..\..\..\cpp\html\index.html" format="html">C++ API</xref></p>
        </note>
      </li>
      <li>插入数据：insert<codeblock>// 首先，需要创建一个插入的 bson 对象。
BSONObj obj ;
obj = BSON ( "name" &lt;&lt; "tom" &lt;&lt; "age" &lt;&lt; 24 ) ;
// 接着，把此 bson 对象插入集合中
collection.insert ( obj ) ;</codeblock>
        <p>obj 为输入参数，为要插入的数据。</p></li>
      <li>查询：query<codeblock>// 定义一个游标对象
sdbCursor cursor ;
…
// 查询所有记录，并把查询结果放在游标对象中
collection.query ( cursor ) ;
// 从游标中显示所有记录
while( !( rc=cursor.next( obj ) ) 
{
    cout &lt;&lt; obj.toString() &lt;&lt; endl ;
    }</codeblock>
        <p>查询操作需要一个游标对象存放查询的结果到本地。要获得查询的结果需要使用游标操作。本例使用了游标操作的 next 接口，表示从查询结果中取到一条记录。此示例中没有设置查询条件，筛选条件，排序情况，及仅使用默认索引。</p>
      </li>
      <li>创建索引：index<codeblock>#define INDEX_NAME "index"
…
// 首先创建一 BSONObj 对象包含将要创建的索引的信息
BSONObj obj ;
obj = BSON ( "name" &lt;&lt; 1 &lt;&lt; "age" &lt;&lt; -1 ) ;
// 创建一个以"name"为升序，"age"为降序的索引
collection.createIndex ( obj, INDEX_NAME, FALSE, FALSE ) ;</codeblock>
        <p>集合对象 collection 中创建一个以"name"为升序，"age"为降序的索引。</p>
      </li>
      <li>更新：update<codeblock>// 先创建一个包含更新规则的 BSONObj 对象
BSONObj rule = BSON ( "$set" &lt;&lt; BSON ( "age" &lt;&lt; 19 ) ) ;
// 打印出更新规则
cout &lt;&lt; rule.toString() &lt;&lt; endl ;
// 更新记录
collection.update( rule ) ;</codeblock>
        <p>在集合对象 collection 中更新了记录。实例中没有指定数据匹配规则，所以此示例将更新集合中所有的集合。</p>
      </li>
    </ul>
    </section>
    <section>
      <title>集群操作</title>
      <ul>
        <li>分区组操作
          <p>分区组操作包括创建分区组（sdb:createReplicaGroup），得到分区组实例（sdb:getReplicaGroup），启动分区组所有数据节点（sdbReplicaGroup::start），停止分区组所有数据节点（sdbReplicaGroup::stop）等。</p>
          <p>以下为分区组操作示例性的例子。真正的应用应包括错误检测等。
          </p><codeblock>// 定义一个分区组实例
sdbReplicaGroup rg  ;
// 定义一个空的 map 对象表示创建数据节点没有更多的配置内容
map&lt;string,string> config ;
…
// 先建立一个编目分区组
connection.createCataReplicaGroup ( HOST_NAME, SERVICE_NAME, CATALOG_GROUP_PATH, NULL ) ;
// 创建数据分区组
connection.createRG ( REPLICA_GROUP_NAME, rg ) ;
// 创建第一个数据节点
rg.createNode ( HOST_NAME1, SERVICE_NAME1, DATABASE_PATH1, config ) ;
…
// 启动分区组
rg.start () ;</codeblock>
        </li>
        <li>数据节点操作<p>数据节点操作包括创建数据节点（sdbReplicaGroup::createNode），得到主数据节点（sdbReplicaGroup::getMaster），得到从数据节点（sdbReplicaGroup::getSlave），启动数据节点（sdbNode::start），停止数据节点（sdbNode::Stop）等。</p>
          <p>以下为数据节点操作示例性的例子。真正的应用应包括错误检测等。</p><codeblock>// 定义一个数据节点实例
sdbNode masternode ;
sdbNode slavenode ;
…
// 获取主数据节点
rg.getMaster( masternode ) ;
//获取从数据节点
rg.getSlave( slavenode ) ;</codeblock>
        </li>
      </ul>
    </section>
  </body>
</topic>
