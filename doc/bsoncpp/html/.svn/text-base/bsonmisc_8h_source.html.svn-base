<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SequoiaDB: E:/sequoiadb/client/include/bson/bsonmisc.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SequoiaDB
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_5d5e8e09700f72ff2a276389d62c94f7.html">client</a></li><li class="navelem"><a class="el" href="dir_abc5dc4d4aa4b7cb7eaa95f96145854d.html">include</a></li><li class="navelem"><a class="el" href="dir_de4700c60ca46fbad1ac84a8eac52823.html">bson</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">bsonmisc.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="bsonmisc_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">/*    Copyright 2009 10gen Inc.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *    http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *    limitations under the License.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;bsonnoncopyable.h&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span>bson {</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">int</span> getGtLtOp(<span class="keyword">const</span> BSONElement&amp; e);</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="code" href="structbson_1_1BSONElementCmpWithoutField.html">   32</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structbson_1_1BSONElementCmpWithoutField.html">BSONElementCmpWithoutField</a> {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordtype">bool</span> operator()( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a> &amp;l, <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a> &amp;r )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            <span class="keywordflow">return</span> l.<a class="code" href="classbson_1_1BSONElement.html#a8ad7dfdadaf444a5cb92c04c813f5139" title="Well ordered comparison.">woCompare</a>( r, <span class="keyword">false</span> ) &lt; 0;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        }</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjCmp.html">   38</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONObjCmp.html">BSONObjCmp</a> {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="classbson_1_1BSONObjCmp.html">BSONObjCmp</a>( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> &amp;order = <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a>() ) : _order( order ) {}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordtype">bool</span> operator()( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> &amp;l, <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> &amp;r )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> l.<a class="code" href="classbson_1_1BSONObj.html#ab55ab67739ab937601373cb67d9ff7f2" title="wo=&#39;well ordered&#39;.">woCompare</a>( r, _order ) &lt; 0;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> order()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _order; }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> _order;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    };</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">typedef</span> set&lt;BSONObj,BSONObjCmp&gt; BSONObjSet;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">enum</span> FieldCompareResult {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        LEFT_SUBFIELD = -2,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        LEFT_BEFORE = -1,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        SAME = 0,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        RIGHT_BEFORE = 1 ,</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        RIGHT_SUBFIELD = 2</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    };</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    FieldCompareResult</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      compareDottedFieldNames( <span class="keyword">const</span> <span class="keywordtype">char</span>* l , <span class="keyword">const</span> <span class="keywordtype">char</span>* r );</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="code" href="bsonmisc_8h.html#ab8032d457f0074b50c2aca379a0a545a">   77</a></span>&#160;<span class="preprocessor">#define BSON(x) (( bson::BSONObjBuilder(64) &lt;&lt; x ).obj())</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="bsonmisc_8h.html#a7c39efe531a0b3edf6424f917345e3a7">   85</a></span>&#160;<span class="preprocessor">#define BSON_ARRAY(x) (( bson::BSONArrayBuilder() &lt;&lt; x ).arr())</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="code" href="structbson_1_1GENOIDLabeler.html">   91</a></span>&#160;    <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structbson_1_1GENOIDLabeler.html" title="Utility class to auto assign object IDs.">GENOIDLabeler</a> { } GENOID;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">/* Utility class to add a Date element with the current time</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">       Example:</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">         cout &lt;&lt; BSON( &quot;created&quot; &lt;&lt; DATENOW );</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">          // { created : &quot;2009-10-09 11:41:42&quot; }</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="code" href="structbson_1_1DateNowLabeler.html">   98</a></span>&#160;    <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structbson_1_1DateNowLabeler.html">DateNowLabeler</a> { } DATENOW;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">/* Utility class to add the minKey (minus infinity) to a given attribute</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">       Example:</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">         cout &lt;&lt; BSON( &quot;a&quot; &lt;&lt; MINKEY ); // { &quot;a&quot; : { &quot;$minKey&quot; : 1 } }</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="code" href="structbson_1_1MinKeyLabeler.html">  104</a></span>&#160;    <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structbson_1_1MinKeyLabeler.html">MinKeyLabeler</a> { } MINKEY;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="code" href="structbson_1_1MaxKeyLabeler.html">  105</a></span>&#160;    <span class="keyword">extern</span> <span class="keyword">struct </span><a class="code" href="structbson_1_1MaxKeyLabeler.html">MaxKeyLabeler</a> { } MAXKEY;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// Utility class to implement GT, GTE, etc as described above.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="code" href="classbson_1_1Labeler.html">  108</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbson_1_1Labeler.html">Labeler</a> {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="code" href="structbson_1_1Labeler_1_1Label.html">  110</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="structbson_1_1Labeler_1_1Label.html">Label</a> {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <a class="code" href="structbson_1_1Labeler_1_1Label.html">Label</a>( <span class="keyword">const</span> <span class="keywordtype">char</span> *l ) : l_( l ) {}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">char</span> *l_;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        };</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="classbson_1_1Labeler.html">Labeler</a>( <span class="keyword">const</span> <a class="code" href="structbson_1_1Labeler_1_1Label.html">Label</a> &amp;l, <a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">BSONObjBuilderValueStream</a> *s )</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;          : l_( l ), s_( s ) {}</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; operator&lt;&lt;( T value );</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">/* the value of the element e is appended i.e. for</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">             &quot;age&quot; &lt;&lt; GT &lt;&lt; someElement</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">           one gets</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">             { age : { $gt : someElement&#39;s value } }</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; operator&lt;&lt;( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a>&amp; e );</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keyword">const</span> Label &amp;l_;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">BSONObjBuilderValueStream</a> *s_;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    };</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">extern</span> Labeler::Label GT;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">extern</span> Labeler::Label GTE;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">extern</span> Labeler::Label LT;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">extern</span> Labeler::Label LTE;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">extern</span> Labeler::Label NE;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">extern</span> Labeler::Label SIZE;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// $or helper: OR(BSON(&quot;x&quot; &lt;&lt; GT &lt;&lt; 7), BSON(&quot;y&quot; &lt;&lt; LT &lt;&lt; 6));</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// becomes   : {$or: [{x: {$gt: 7}}, {y: {$lt: 6}}]}</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="keyword">const</span> BSONObj&amp; d);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <span class="keyword">const</span> BSONObj&amp; d, <span class="keyword">const</span> BSONObj&amp; e);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      <span class="keyword">const</span> BSONObj&amp; d, <span class="keyword">const</span> BSONObj&amp; e, <span class="keyword">const</span> BSONObj&amp; f);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// definitions in bsonobjbuilder.h b/c of incomplete types</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="comment">// Utility class to implement BSON( key &lt;&lt; val ) as described above.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">  152</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">BSONObjBuilderValueStream</a> : <span class="keyword">public</span> bsonnoncopyable {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classbson_1_1Labeler.html">Labeler</a>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">BSONObjBuilderValueStream</a>( <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> * builder );</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; operator&lt;&lt;( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a>&amp; e );</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; operator&lt;&lt;( T value );</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">//BSONObjBuilder&amp; operator&lt;&lt;(DateNowLabeler&amp; id);</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; operator&lt;&lt;(<a class="code" href="structbson_1_1MinKeyLabeler.html">MinKeyLabeler</a>&amp; <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; operator&lt;&lt;(<a class="code" href="structbson_1_1MaxKeyLabeler.html">MaxKeyLabeler</a>&amp; <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="classbson_1_1Labeler.html">Labeler</a> operator&lt;&lt;( <span class="keyword">const</span> <a class="code" href="structbson_1_1Labeler_1_1Label.html">Labeler::Label</a> &amp;l );</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordtype">void</span> endField( <span class="keyword">const</span> <span class="keywordtype">char</span> *nextFieldName = 0 );</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordtype">bool</span> subobjStarted()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _fieldName != 0; }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> * _fieldName;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> * _builder;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">bool</span> haveSubobj()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _subobj.get() != 0; }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> *subobj();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        auto_ptr&lt; BSONObjBuilder &gt; _subobj;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    };</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="code" href="classbson_1_1BSONSizeTracker.html">  185</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONSizeTracker.html" title="used in conjuction with BSONObjBuilder, allows for proper buffer size to prevent crazy memory usage...">BSONSizeTracker</a> {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <a class="code" href="classbson_1_1BSONSizeTracker.html" title="used in conjuction with BSONObjBuilder, allows for proper buffer size to prevent crazy memory usage...">BSONSizeTracker</a>() {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            _pos = 0;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i=0; i&lt;SIZE; i++ )</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                _sizes[i] = 512; <span class="comment">// this is the default, so just be consistent</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        ~<a class="code" href="classbson_1_1BSONSizeTracker.html" title="used in conjuction with BSONObjBuilder, allows for proper buffer size to prevent crazy memory usage...">BSONSizeTracker</a>() {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordtype">void</span> got( <span class="keywordtype">int</span> size ) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            _sizes[_pos++] = size;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">if</span> ( _pos &gt;= SIZE )</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                _pos = 0;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="code" href="classbson_1_1BSONSizeTracker.html#af9e3e86dd48a8c2ac217869e1fff23c3">  205</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="classbson_1_1BSONSizeTracker.html#af9e3e86dd48a8c2ac217869e1fff23c3" title="right now choosing largest size">getSize</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordtype">int</span> x = 16; <span class="comment">// sane min</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i=0; i&lt;SIZE; i++ ) {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span> ( _sizes[i] &gt; x )</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    x = _sizes[i];</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keyword">enum</span> { SIZE = 10 };</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordtype">int</span> _pos;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordtype">int</span> _sizes[SIZE];</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    };</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jul 6 2014 16:01:12 for SequoiaDB by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.2
</small></address>
</body>
</html>
