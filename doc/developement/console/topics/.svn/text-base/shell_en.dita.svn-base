<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="developement_console_shell">
  <title>SequoiaDB Shell Introduction </title>
  <body>
    <p>SequoiaDB has a built-in javascript shell, users can communicate with SequoiaDB instance
      through command lines. It is very useful. Through it, users can manage system, check and run
      instance or try other things. Shell is a vital tool in SequoiaDB.</p>
    <section>
      <title>Run shell</title>
      <p>Run sequoiadb(./sequoiadb) and start shellï¼š
        <codeblock>$ ./sdb
Welcome to SequoiaDB shell!
help() for help, Ctrl+c or quit to exit
></codeblock></p>
      <p>Shell will automatically connect to SequoiaDB when SequoiaDB starts, so users should start
        SequoiaDB before using shell.</p>
      <p>Shell is a javascript resolver with complete functions, which can run any javascript
        program. For example: <codeblock>> y=200
200
> y/20
10
></codeblock></p>
      <p>Users can also use javascript
        stdlib:<codeblock>> new Date("2013/04/17");
Wed Apr 17 2013 00:00:00 GMT+0800 (CST)
> "hello,world".replace("world","SequoiaDB")
hello,SequoiaDB
></codeblock></p>
      <p>Uses can define and invoke javascript function:
        <codeblock>> function sdb(n){
... if(n&lt;=1)return 1;
... else return n*sdb(n-1);
... }
> sdb(4);
24
></codeblock></p>
      <note>We can use multi-line commands. Shell will check out whether javascript statement is
        complete. If it is not complete, users can continue to input next line.</note>
    </section>
    <section>
      <title>SequoiaDB Client</title>
      <p>Shell can run any javascript program. But the particular feature of shell is that is a
        unique SequoiaDB client. When the system is started, with the command "db=new
        Sdb("localhost",11810)", users can connect to local database in sequoiaDB server and assign
        it to the global variable "db". This variable is the a main entrance to visit SequoiaDB in
        shell.</p>
      <p>Shell also has some non-javascript commands. For example:
        <codeblock>> db
localhost:11810
> db.create("foo")   //create colleciton space
localhost:11810.foo</codeblock></p>
      <p>Users can visit the collection space in it through the variable "db". "db.foo" returns the
        collection space "foo" in current database. Users can visit collection in it like
        "db.foo.bar" which returns the collection "bar" in collection "foo". Since users can visit
        collections in shell, they can execute almost all manipulations in database.</p>
    </section>
  </body>
  <related-links>
    <link href="../../basics/topics/shell_en.dita"></link>
  </related-links>
</topic>
