<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_hsx_hlt_zj">
  <title>C++ Development Foundation</title>
  <body>
    <p>This section introduce how to use C++ client-driven interfaces to run C++ application.for
      simple, the following examples are not full code, only play an exemplary role. You can get the
      full code in the directory "/sequoiadb/client/samples/CPP", for more, please refer to <xref
        href="..\..\..\..\cpp\html\index.html" format="html">online C++ API </xref></p>
    <section>
      <title>Database operations</title>
      <ul>
        <li>Connecting Database <p>"connect.cpp" shows how to connect database. The file must
            contain the head file "client.hpp" and use namespace
            "sdbclient".</p><codeblock>#include &lt;stdio.h>
#include &lt;iostream>
#include "client.hpp"

using namespace std ;
using namespace sdbclient ;

// Display Syntax Error
void displaySyntax ( CHAR *pCommand ) ;

INT32 main ( INT32 argc, CHAR **argv )
{
   // define a sdb object
   // use to connect to database
   sdb connection ;
   INT32 rc = SDB_OK ;

   // verify syntax
   if ( 5 != argc )
   {
      displaySyntax ( (CHAR*)argv[0] ) ;
      exit ( 0 ) ;
   }

   // read argument
   CHAR *pHostName    = (CHAR*)argv[1] ;
   UINT16 Port        =  atoi(argv[2]) ;
   CHAR *pUsr         = (CHAR*)argv[3] ;
   CHAR *pPasswd      = (CHAR*)argv[4] ;

   // connect to database
   rc = connection.connect ( pHostName, Port, pUsr, pPasswd ) ;
   if( rc!=SDB_OK )
   {
      cout&lt;&lt;"Fail to connet to database, rc = "&lt;&lt;rc&lt;&lt;endl ;
      goto error ;
   }
   else
      cout&lt;&lt;"connect success!"&lt;&lt;endl ;
done:
   // disconnect from database
   connection.disconnect () ;
   return 0 ;
error:
   goto done ;
}

// Display Syntax Error
void displaySyntax ( CHAR *pCommand )
{
   cout&lt;&lt;"Syntax:"&lt;&lt;pCommand&lt;&lt;" &lt;host>&lt;name>&lt;servicename>\
 &lt;username>&lt;password>"&lt;&lt;endl ;
 }</codeblock><p>In
            Linux, you can compile and link the dynamic library "libsdbcpp.so" like this:
            </p><codeblock>$ gcc -o connect connect.cpp -I <i>&lt;PATH&gt;</i>/sequoiadb/client/CPP/include -lsdbcpp -L <i>&lt;PATH&gt;</i>/sequoiadb/client/CPP/lib
Execution results:
$ ./connect localhost 11810 "" ""
connect success!</codeblock>
          <!--<p>In Windows, compiling and linking the dynamic library "sdbcpp.lib" and "sdbcpp.dll" like
            this:</p><codeblock>> cl /Fo connect.obj /c connect.cpp /I <i>&lt;PATH&gt;</i>\sequoiadb\client\CPP\include /wd4047
> link /OUT:connect.exe /LIBPATH:<i>&lt;PATH&gt;</i>\sequoiadb\client\CPP \lib sdbcpp.lib connect.obj 
> copy <i>&lt;PATH&gt;</i>\sequoiadb\client\CPP\lib\sdbcpp.dll .
Execution results:
> connect.exe localhost 11810 "" ""
> connect success!</codeblock>-->
          <note>
            <p>This sample connects to the port "11810" of local database, usename and password are
              null, users can configure params according to needs. For example, when the user have
              created usename and password, you must use the correct usename and password to connect
              the database.</p>
          </note></li>
        <li>Create a collection of space and set.<codeblock>// First of all, the definition of set space, a collection of object
sdbCollectionSpace collectionspace ;
sdbCollection collection ;
// Create collection space "foo"
rc = connection.createCollectionSpace ( "foo", SDB_PAGESIZE_4K, collectionspace ) ;
// Create the collection in the new collection space "bar"
rc = collectionspace.createCollection ( "bar", collection ) ;</codeblock>
          <p>Create a name for the "foo" collection space and a name for the "bar" collection, collection of pages of data set size space for 4K. Can choose according to the actual situation of 
          different size of data pages. Create the collection, the collection do CURD operations.</p>
          <note>
            <p>In crating a collection of "bar" and no additional partitions, compression and other information, please refer to <xref href="..\..\..\..\cpp\html\index.html" format="html">C++ API</xref></p>
          </note>
        </li>
        <li>Inserting
            Data<codeblock>// Firstly, a BSON object is created bson obj;
BSONObj obj ;
obj = BSON ( "name" &lt;&lt; "tom" &lt;&lt; "age" &lt;&lt; 24 ) ;
// Then, insert it into a collection
collection.insert ( &amp;obj ) ;</codeblock><p>obj is inputed param and inserted data.</p></li>
        <li>Query
            <codeblock>// Define a cursor object
sdbCursor cursor ;
…
// Search for all records and put the results in the cursor object
collection.query ( cursor ) ;
// Show every record in cursor
while( !( rc=cursor.next( obj ) ) 
{
    cout &lt;&lt; obj.toString() &lt;&lt; endl ;
    }</codeblock><p>
            In a query, a cursor object is used to store the result set of a query . You can get
            results by manipulating the cursor.  This sample uses the <i>next</i> interface of
            cursor manipulation to get one record in the result set. This sample does not set
            querying conditions, filtering conditions and ordering, only use default index.</p></li>
        <li>Index
            <codeblock>#define INDEX_NAME "index"
…
// Firstly we create a bson that contains the information of the index.
BSONObj obj ;
obj = BSON ( "name" &lt;&lt; 1 &lt;&lt; "age" &lt;&lt; -1 ) ;
// Create a "name" as "age" for the ascending, descending index.
collection.createIndex ( obj, INDEX_NAME, FALSE, FALSE ) ;</codeblock>
          <p>
            Here, we create an index in the collection specified by the collection object
              <i>collection</i> . It is in ascending order on "name" and descending order on "age"
          </p></li>
        <li>Update
            <codeblock>// Create a BSON object that contains updating rules
BSONObj rule = BSON ( "$set" &lt;&lt; BSON ( "age" &lt;&lt; 19 ) ) ;
//  Print updating rule.
cout &lt;&lt; rule.toString() &lt;&lt; endl ;
// Update records.
collection.update( rule ) ;</codeblock><p>Here, as
            no record matching conditions have specified, then this example will update all records
            in the collection which collection handle specified. </p></li>
      </ul>
    </section>
    <section>
      <title>Cluster Operations </title>
      <ul>
        <li> Replica group Operations <p>Replica group Operations contains creating
            Replica groups(sdbCreateGroup), getting Replica group handles(sdbGetGroup), starting
            Replica group(sdbStartGroup) and stopping Replica group(sdbStopGroup). The following shows the
            Replica group Operations, and real application should include error detecting, etc.
          </p><codeblock>// define a Replica group Instance
sdbReplicaGroup rg  ;
// define a null map object,it means that no more configuration information when create data nodes
map&lt;string,string> config ;
…
// create a catalog Replica group at first
connection.createCataReplicaGroup ( HOST_NAME, SERVICE_NAME, CATALOG_SHARD_PATH, NULL ) ;
// create data Replica group
connection.createRG ( REPLICA_SHARD_NAME, rg ) ;
// create data nodes
rg.createNode ( HOST_NAME1, SERVICE_NAME1, DATABASE_PATH1, config ) ;
…
// start Replica group
rg.start () ;</codeblock></li>
        <li>Data Node Operations <p>Data Node Operations contains create data
            node(sdbReplicaGroup::createNode), get master data node(sdbReplicaGroup::getMaster), get slave data
            node(sdbReplicaGroup::GetSlave), start data node (sdbNode::Start) and stop data
            node(sdbNode::Stop), etc. The following shows the Data Node Operations, and real
            application should include error detecting, etc.
          </p><codeblock>// define a data node instance
sdbNode masternode ;
sdbNode slavenode ;
…
// get master data node
rg.getMaster( masternode ) ;
//get slave data node
rg.getSlave( slavenode ) ;</codeblock></li>
      </ul>
    </section>
  </body>
</topic>
