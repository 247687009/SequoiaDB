<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SequoiaDB: E:/sequoiadb/client/include/bson/bsonobjbuilder.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SequoiaDB
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_5d5e8e09700f72ff2a276389d62c94f7.html">client</a></li><li class="navelem"><a class="el" href="dir_abc5dc4d4aa4b7cb7eaa95f96145854d.html">include</a></li><li class="navelem"><a class="el" href="dir_de4700c60ca46fbad1ac84a8eac52823.html">bson</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">bsonobjbuilder.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="bsonobjbuilder_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">/*    Copyright 2009 10gen Inc.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *    you may not use this file except in compliance with the License.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *    You may obtain a copy of the License at</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *    http://www.apache.org/licenses/LICENSE-2.0</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *    Unless required by applicable law or agreed to in writing, software</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *    See the License for the specific language governing permissions and</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *    limitations under the License.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#if defined (SDB_ENGINE) || defined (SDB_CLIENT)</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;core.hpp&quot;</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;oss.hpp&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">//#include &quot;bsonobjiterator.h&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">//#include &quot;bson-inl.h&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bsonmisc_8h.html" title="BSON macro.">bsonmisc.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;bsonnoncopyable.h&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>bson {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#if defined(_WIN32)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor"></span><span class="comment">// warning: &#39;this&#39; : used in base member initializer list</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#pragma warning( disable : 4355 )</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="code" href="classbson_1_1BSONFieldValue.html">   44</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue</a> {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name , <span class="keyword">const</span> T&amp; t ) {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            _name = name;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            _t = t;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        }</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">const</span> T&amp; value()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _t; }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _name; }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordtype">string</span> _name;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        T _t;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    };</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="classbson_1_1BSONField.html">   60</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONField.html">BSONField</a> {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="classbson_1_1BSONField.html">BSONField</a>( <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name , <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; longName=<span class="stringliteral">&quot;&quot;</span> )</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            : _name(name), _longName(longName) {}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; name()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _name; }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">operator</span> string()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _name; }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;T&gt;</a> make( <span class="keyword">const</span> T&amp; t )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;T&gt;</a>( _name , t );</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;BSONObj&gt;</a> gt( <span class="keyword">const</span> T&amp; t )<span class="keyword"> const</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">          </span>{ <span class="keywordflow">return</span> query( <span class="stringliteral">&quot;$gt&quot;</span> , t ); }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;BSONObj&gt;</a> lt( <span class="keyword">const</span> T&amp; t )<span class="keyword"> const</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">          </span>{ <span class="keywordflow">return</span> query( <span class="stringliteral">&quot;$lt&quot;</span> , t ); }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;BSONObj&gt;</a> query( <span class="keyword">const</span> <span class="keywordtype">char</span> * q , <span class="keyword">const</span> T&amp; t ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;T&gt;</a> operator()( <span class="keyword">const</span> T&amp; t )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classbson_1_1BSONFieldValue.html">BSONFieldValue&lt;T&gt;</a>( _name , t );</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordtype">string</span> _name;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordtype">string</span> _longName;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    };</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#if defined (SDB_ENGINE) || defined (SDB_CLIENT)</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor"></span>    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> : bsonnoncopyable, <span class="keyword">public</span> SDBObject {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html">   93</a></span>&#160;<span class="preprocessor"></span>    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> : bsonnoncopyable {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor"></span>    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ae2f1343bdfc08f5363cfda0d5ee9f1b2">   98</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>(<span class="keywordtype">int</span> initsize=512) : _b(_buf), _buf(initsize + sizeof(unsigned)),</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;          _offset( sizeof(unsigned) ), _s( this ) , _tracker(0) , _doneCalled(false) {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            _b.appendNum((<span class="keywordtype">unsigned</span>)0);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            _b.skip(4); <span class="comment">/*leave room for size field and ref-count*/</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#aceb535385f23b2aa19eeeedbd577db7c">  108</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>( BufBuilder &amp;baseBuilder ) : _b( baseBuilder ), _buf( 0 ),</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;          _offset( baseBuilder.len() ), _s( this ) , _tracker(0) , _doneCalled(false) {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            _b.skip( 4 );</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONSizeTracker.html" title="used in conjuction with BSONObjBuilder, allows for proper buffer size to prevent crazy memory usage...">BSONSizeTracker</a> &amp; tracker ) : _b(_buf) ,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;          _buf(tracker.getSize() + sizeof(unsigned) ), _offset( sizeof(unsigned) ),</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;          _s( this ) , _tracker( (<a class="code" href="classbson_1_1BSONSizeTracker.html" title="used in conjuction with BSONObjBuilder, allows for proper buffer size to prevent crazy memory usage...">BSONSizeTracker</a>*)(&amp;tracker) ) , _doneCalled(false) {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            _b.appendNum((<span class="keywordtype">unsigned</span>)0); <span class="comment">// ref-count</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            _b.skip(4);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        ~BSONObjBuilder() {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> ( !_doneCalled &amp;&amp; _b.buf() &amp;&amp; _buf.getSize() == 0 ) {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                _done();</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        BSONObjBuilder&amp; appendElements(BSONObj x);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        BSONObjBuilder&amp; appendElementsUnique( BSONObj x );</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a027d9a8d8bae9244e2a91fc8944c43aa">  134</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a027d9a8d8bae9244e2a91fc8944c43aa" title="append element to the object we are building">append</a>( <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a>&amp; e) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            assert( !e.<a class="code" href="classbson_1_1BSONElement.html#ac4f6fda180d892825029bae80fe16c6e" title="Indicates if it is the end-of-object element, which is present at the end of every BSON object...">eoo</a>() ); <span class="comment">// do not append eoo, that would corrupt us.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            <span class="comment">// the builder auto appends when done() is called.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            _b.appendBuf((<span class="keywordtype">void</span>*) e.rawdata(), e.<a class="code" href="classbson_1_1BSONElement.html#aa0c202840a29db5dc5c17ea92dd9237f" title="Size of the element.">size</a>());</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a90852beb43e4b1c011139cbeb1c58363">  142</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendAs(<span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a>&amp; e,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;          <span class="keyword">const</span> StringData&amp; fieldName) {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            assert( !e.<a class="code" href="classbson_1_1BSONElement.html#ac4f6fda180d892825029bae80fe16c6e" title="Indicates if it is the end-of-object element, which is present at the end of every BSON object...">eoo</a>() ); <span class="comment">// do not append eoo, that would corrupt us.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                              <span class="comment">// the builder auto appends when done() is called.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) e.<a class="code" href="classbson_1_1BSONElement.html#a6d742c8562fbafec28916aba6d870f79" title="Returns the type of the element.">type</a>());</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            _b.appendBuf((<span class="keywordtype">void</span> *) e.<a class="code" href="classbson_1_1BSONElement.html#a72d5c6c93c394b54987d99b149a64687" title="raw data of the element&#39;s value (so be careful).">value</a>(), e.<a class="code" href="classbson_1_1BSONElement.html#a4d91f92867f4268ec22c704b804e396b" title="size in bytes of the element&#39;s value (when applicable).">valuesize</a>());</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a0030576e97230c28995d571f4fab97b8">  153</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a0030576e97230c28995d571f4fab97b8" title="add a subobject as a member">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> subObj) {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Object);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            _b.appendBuf((<span class="keywordtype">void</span> *) subObj.<a class="code" href="classbson_1_1BSONObj.html#a73d20448bb811e0f0fb2b0bc7430e0a1">objdata</a>(), subObj.<a class="code" href="classbson_1_1BSONObj.html#adb7630bc73b3a46398ad12f4bfbc60fc">objsize</a>());</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a94de4e5755784ab2561017b042ac5fdc">  161</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendObject(<span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">char</span> * objdata , <span class="keywordtype">int</span> size = 0 ) {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            assert( objdata );</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">if</span> ( size == 0 ) {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                size = *((<span class="keywordtype">int</span>*)objdata);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            assert( size &gt; 4 &amp;&amp; size &lt; 100000000 );</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Object);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            _b.appendBuf((<span class="keywordtype">void</span>*)objdata, size );</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a98314e92ddac89275de97da0f73c7b43">  187</a></span>&#160;        BufBuilder &amp;<a class="code" href="classbson_1_1BSONObjBuilder.html#a98314e92ddac89275de97da0f73c7b43" title="add header for a new subobject and return bufbuilder for writing to the subobject&#39;s body...">subobjStart</a>(<span class="keyword">const</span> StringData&amp; fieldName) {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Object);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> _b;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a5efeb19109a007424cb93af31a2b8024">  196</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendArray(<span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;          <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> &amp;subObj) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Array);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            _b.appendBuf((<span class="keywordtype">void</span> *) subObj.<a class="code" href="classbson_1_1BSONObj.html#a73d20448bb811e0f0fb2b0bc7430e0a1">objdata</a>(), subObj.<a class="code" href="classbson_1_1BSONObj.html#adb7630bc73b3a46398ad12f4bfbc60fc">objsize</a>());</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; append(<span class="keyword">const</span> StringData&amp; fieldName, <a class="code" href="structbson_1_1BSONArray.html">BSONArray</a> arr) {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">return</span> appendArray(fieldName, arr);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ad9c4f1ae2e143ce09c76a9d68360dbca">  209</a></span>&#160;        BufBuilder &amp;<a class="code" href="classbson_1_1BSONObjBuilder.html#ad9c4f1ae2e143ce09c76a9d68360dbca" title="add header for a new subarray and return bufbuilder for writing to the subarray&#39;s body...">subarrayStart</a>(<span class="keyword">const</span> StringData&amp; fieldName) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Array);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">return</span> _b;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ae5c0f7a719467505e2660833f12dc00e">  216</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#ae5c0f7a719467505e2660833f12dc00e" title="Append a boolean element.">appendBool</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">int</span> val) {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Bool);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) (val?1:0));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ab04a6b881cf279937b7113ca8435f041">  224</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#ab04a6b881cf279937b7113ca8435f041" title="Append a boolean element.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">bool</span> val) {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Bool);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) (val?1:0));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a028b5e5b2566598b41b9adca14fcc500">  232</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a028b5e5b2566598b41b9adca14fcc500" title="Append a 32 bit integer element.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">int</span> n) {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) NumberInt);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            _b.appendNum(n);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a1f5d7df0939540b3331b896785730bc8">  240</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a1f5d7df0939540b3331b896785730bc8" title="Append a 32 bit unsigned element - cast to a signed int.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">unsigned</span> n) {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keywordflow">return</span> append(fieldName, (<span class="keywordtype">int</span>) n);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a2e0689de6745fa821a3105bbe2838c82">  245</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a2e0689de6745fa821a3105bbe2838c82" title="Append a NumberLong.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">long</span> <span class="keywordtype">long</span> n) {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) NumberLong);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            _b.appendNum(n);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a8868d2643bbdadab8d8b5d778d6700a0">  254</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendIntOrLL( <span class="keyword">const</span> StringData&amp; fieldName ,</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;          <span class="keywordtype">long</span> <span class="keywordtype">long</span> n ) {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordtype">long</span> <span class="keywordtype">long</span> x = n;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">if</span> ( x &lt; 0 )</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                x = x * -1;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">if</span> ( x &lt; ( (numeric_limits&lt;int&gt;::max)() / 2 ) ) <span class="comment">// extra () to avoid max macro on windows</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                append( fieldName , (<span class="keywordtype">int</span>)n );</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                append( fieldName , n );</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a76dbde97a7640b457c388e6b1e6d3c12">  270</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a76dbde97a7640b457c388e6b1e6d3c12" title="appendNumber is a series of method for appending the smallest sensible type.">appendNumber</a>( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keywordtype">int</span> n ) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">return</span> append( fieldName , n );</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendNumber( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keywordtype">double</span> d ) {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">return</span> append( fieldName , d );</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        BSONObjBuilder&amp; appendNumber( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keywordtype">size_t</span> n ) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">size_t</span> maxInt = (size_t)pow( 2.0 , 30.0 );</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">if</span> ( n &lt; maxInt )</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                append( fieldName , (<span class="keywordtype">int</span>)n );</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                append( fieldName , (<span class="keywordtype">long</span> <span class="keywordtype">long</span>)n );</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        BSONObjBuilder&amp; appendNumber( <span class="keyword">const</span> StringData&amp; fieldName ,</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;          <span class="keywordtype">long</span> <span class="keywordtype">long</span> l ) {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> maxInt = (int)pow( 2.0 , 30.0 );</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keyword">static</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> maxDouble = (<span class="keywordtype">long</span> long)pow( 2.0 , 40.0 );</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordtype">long</span> <span class="keywordtype">long</span> x = l &gt;= 0 ? l : -l;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">if</span> ( x &lt; maxInt )</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                append( fieldName , (<span class="keywordtype">int</span>)l );</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( x &lt; maxDouble )</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                append( fieldName , (<span class="keywordtype">double</span>)l );</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                append( fieldName , l );</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#adb8f56fbbb4d8e84ad1d4997c0ce9525">  303</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#adb8f56fbbb4d8e84ad1d4997c0ce9525" title="Append a double element.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">double</span> n) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) NumberDouble);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            _b.appendNum(n);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordtype">bool</span> appendAsNumber( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; data );</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#acd4a3537590d05af07585d13058915b6">  319</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendOID(<span class="keyword">const</span> StringData&amp; fieldName, OID *oid = 0 ,</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;          <span class="keywordtype">bool</span> generateIfBlank = <span class="keyword">false</span> ) {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) jstOID);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">if</span> ( oid )</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                _b.appendBuf( (<span class="keywordtype">void</span> *) oid, 12 );</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                OID tmp;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                <span class="keywordflow">if</span> ( generateIfBlank )</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    tmp.init();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    tmp.clear();</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                _b.appendBuf( (<span class="keywordtype">void</span> *) &amp;tmp, 12 );</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00341"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a05af32b74a5767e1d75f54eaaa272eb3">  341</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a05af32b74a5767e1d75f54eaaa272eb3" title="Append a BSON Object ID.">append</a>( <span class="keyword">const</span> StringData&amp; fieldName, OID oid ) {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) jstOID);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            _b.appendBuf( (<span class="keywordtype">void</span> *) &amp;oid, 12 );</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00352"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a71a427dc7775bc6752ef44b25ad9b7a7">  352</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a71a427dc7775bc6752ef44b25ad9b7a7" title="Generate and assign an object id for the _id field.">genOID</a>() {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keywordflow">return</span> append(<span class="stringliteral">&quot;_id&quot;</span>, OID::gen());</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a1211695b3084150fb00b4281cbe70145">  360</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a1211695b3084150fb00b4281cbe70145" title="Append a time_t date.">appendTimeT</a>(<span class="keyword">const</span> StringData&amp; fieldName, time_t dt) {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Date);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            _b.appendNum(static_cast&lt;unsigned long long&gt;(dt) * 1000);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        }</div>
<div class="line"><a name="l00370"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ab650bc6098457875539747d873497e48">  370</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#ab650bc6098457875539747d873497e48" title="Append a date.">appendDate</a>(<span class="keyword">const</span> StringData&amp; fieldName, Date_t dt) {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="comment">/* easy to pass a time_t to this and get a bad result.</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">               thus this warning. */</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">#if defined(_DEBUG) &amp;&amp; defined(MONGO_EXPOSE_MACROS)</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span>( dt &gt; 0 &amp;&amp; dt &lt;= 0xffffffff ) {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                <span class="keyword">static</span> <span class="keywordtype">int</span> n;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                <span class="keywordflow">if</span>( n++ == 0 )</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    log() &lt;&lt; <span class="stringliteral">&quot;DEV WARNING appendDate() called with a tiny &quot;</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                             <span class="stringliteral">&quot;(but nonzero) date&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="preprocessor"></span>            _b.appendNum((<span class="keywordtype">char</span>) Date);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            _b.appendNum(dt);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        }</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; append(<span class="keyword">const</span> StringData&amp; fieldName, Date_t dt) {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">return</span> appendDate(fieldName, dt);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a856483bb76fdd7bb536ca53d0a629f4b">  394</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendRegex(<span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;          <span class="keyword">const</span> StringData&amp; regex, <span class="keyword">const</span> StringData&amp; options = <span class="stringliteral">&quot;&quot;</span>) {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) RegEx);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            _b.appendStr(regex);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            _b.appendStr(options);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendCode(<span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;          <span class="keyword">const</span> StringData&amp; code) {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Code);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            _b.appendNum((<span class="keywordtype">int</span>) code.size()+1);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            _b.appendStr(code);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00414"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ada1072c18a841125cf6773117a8496af">  414</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; append(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> <span class="keywordtype">char</span> *str,</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;          <span class="keywordtype">int</span> sz) {</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) String);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            _b.appendNum((<span class="keywordtype">int</span>)sz);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            _b.appendBuf(str, sz);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        }</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a4c5abe4632fa84eb70320eae3bb0f251">  425</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendStrWithNoTerminating(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> <span class="keywordtype">char</span> *str,</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;          <span class="keywordtype">int</span> sz)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;           _b.appendNum((<span class="keywordtype">char</span>) String);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;           _b.appendStr(fieldName);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;           _b.appendNum((<span class="keywordtype">int</span>)sz + 1);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;           _b.appendBuf(str, sz);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;           <span class="keywordtype">char</span> t = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;           _b.appendBuf(&amp;t, 1);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;           <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }       </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a8513b53ea03ed674e43e82cab5d078d3">  438</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a8513b53ea03ed674e43e82cab5d078d3" title="Append a string element.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> <span class="keywordtype">char</span> *str) {</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <span class="keywordflow">return</span> append(fieldName, str, (<span class="keywordtype">int</span>) strlen(str)+1);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        }</div>
<div class="line"><a name="l00442"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a19b1d6c57693f654d3e7b6649e9a4723">  442</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a19b1d6c57693f654d3e7b6649e9a4723" title="Append a string element.">append</a>(<span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; str) {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">return</span> append(fieldName, str.c_str(), (int) str.size()+1);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendSymbol(<span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;          <span class="keyword">const</span> StringData&amp; symbol) {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) Symbol);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            _b.appendStr(fieldName);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            _b.appendNum((<span class="keywordtype">int</span>) symbol.size()+1);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            _b.appendStr(symbol);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a3b6d5f2ec0b7e822c029a6a3e689b7d0">  456</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a3b6d5f2ec0b7e822c029a6a3e689b7d0" title="Append a Null element to the object.">appendNull</a>( <span class="keyword">const</span> StringData&amp; fieldName ) {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) jstNULL );</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="comment">// Append an element that is less than all other keys.</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendMinKey( <span class="keyword">const</span> StringData&amp; fieldName ) {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) MinKey );</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a5fb8fd255f28a2e4186d43ede5c06ef8">  470</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a5fb8fd255f28a2e4186d43ede5c06ef8" title="Append a Undefined element to the object.">appendUndefined</a>( <span class="keyword">const</span> StringData&amp; fieldName ) {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) Undefined );</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        }</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="comment">// Append an element that is greater than all other keys.</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendMaxKey( <span class="keyword">const</span> StringData&amp; fieldName ) {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) MaxKey );</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="comment">// Append a Timestamp field -- will be updated to next OpTime on db</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="comment">// insert.</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        BSONObjBuilder&amp; appendTimestamp( <span class="keyword">const</span> StringData&amp; fieldName ) {</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) Timestamp );</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            _b.appendNum( (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span>) 0 );</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        BSONObjBuilder&amp; appendTimestamp( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> val ) {</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) Timestamp );</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            _b.appendNum( val );</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        BSONObjBuilder&amp; appendTimestamp( <span class="keyword">const</span> StringData&amp; fieldName ,</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> time , <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inc );</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">        Append an element of the deprecated DBRef type.</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">        @deprecated</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        BSONObjBuilder&amp; appendDBRef( <span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;          <span class="keyword">const</span> StringData&amp; ns, <span class="keyword">const</span> OID &amp;oid ) {</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) DBRef );</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            _b.appendNum( (<span class="keywordtype">int</span>) ns.size() + 1 );</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            _b.appendStr( ns );</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            _b.appendBuf( (<span class="keywordtype">void</span> *) &amp;oid, 12 );</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00529"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ae809fc968ade4242f9fb930ea0275e0b">  529</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendBinData( <span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">int</span> len,</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;          BinDataType type, <span class="keyword">const</span> <span class="keywordtype">char</span> *data ) {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) BinData );</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            _b.appendNum( len );</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) type );</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            _b.appendBuf( (<span class="keywordtype">void</span> *) data, len );</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendBinData( <span class="keyword">const</span> StringData&amp; fieldName, <span class="keywordtype">int</span> len,</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;          BinDataType type, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *data ) {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordflow">return</span> appendBinData(fieldName, len, type, (<span class="keyword">const</span> <span class="keywordtype">char</span> *) data);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        }</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a39aafc862cc739c22646fea534f84ce0">  549</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendBinDataArrayDeprecated( <span class="keyword">const</span> <span class="keywordtype">char</span> * fieldName ,</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;          <span class="keyword">const</span> <span class="keywordtype">char</span> * data , <span class="keywordtype">int</span> len ) {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) BinData );</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            _b.appendNum( len + 4 );</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>)0x2 );</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            _b.appendNum( len );</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            _b.appendBuf( (<span class="keywordtype">void</span> *) data, len );</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        }</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a9ac3ddd821fcecfae8780cb0be5054fd">  563</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; appendCodeWScope( <span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;          <span class="keyword">const</span> StringData&amp; code, <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> &amp;scope ) {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            _b.appendNum( (<span class="keywordtype">char</span>) CodeWScope );</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            _b.appendStr( fieldName );</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            _b.appendNum( ( <span class="keywordtype">int</span> )( 4 + 4 + code.size() + 1 + scope.<a class="code" href="classbson_1_1BSONObj.html#adb7630bc73b3a46398ad12f4bfbc60fc">objsize</a>() ));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            _b.appendNum( ( <span class="keywordtype">int</span> ) code.size() + 1 );</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            _b.appendStr( code );</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            _b.appendBuf( ( <span class="keywordtype">void</span> * )scope.<a class="code" href="classbson_1_1BSONObj.html#a73d20448bb811e0f0fb2b0bc7430e0a1">objdata</a>(), scope.<a class="code" href="classbson_1_1BSONObj.html#adb7630bc73b3a46398ad12f4bfbc60fc">objsize</a>() );</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        }</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="comment">/*void appendUndefined( const StringData&amp; fieldName ) {</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">            _b.appendNum( (char) Undefined );</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">            _b.appendStr( fieldName );</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">        }*/</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="comment">/* helper function -- see Query::where() for primary way to do this. */</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordtype">void</span> appendWhere( <span class="keyword">const</span> StringData&amp; code, <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> &amp;scope ) {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            appendCodeWScope( <span class="stringliteral">&quot;$where&quot;</span> , code , scope );</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordtype">void</span> appendMinForType( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keywordtype">int</span> type );</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="keywordtype">void</span> appendMaxForType( <span class="keyword">const</span> StringData&amp; fieldName , <span class="keywordtype">int</span> type );</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keyword">template</span> &lt; <span class="keyword">class</span> T &gt;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        BSONObjBuilder&amp; append( <span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;          <span class="keyword">const</span> vector&lt; T &gt;&amp; vals );</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keyword">template</span> &lt; <span class="keyword">class</span> T &gt;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        BSONObjBuilder&amp; append( <span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;          <span class="keyword">const</span> list&lt; T &gt;&amp; vals );</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="keyword">template</span> &lt; <span class="keyword">class</span> T &gt;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        BSONObjBuilder&amp; append( <span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> set&lt; T &gt;&amp; vals );</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a91a6e9db4d526edb42b56e3aa123b066">  609</a></span>&#160;        <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> <a class="code" href="classbson_1_1BSONObjBuilder.html#a91a6e9db4d526edb42b56e3aa123b066" title="destructive The returned BSONObj will free the buffer when it is finished.">obj</a>() {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keywordtype">bool</span> own = owned();</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            massert( 10335 , <span class="stringliteral">&quot;builder does not own memory&quot;</span>, own );</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            doneFast();</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <a class="code" href="classbson_1_1BSONObj_1_1Holder.html">BSONObj::Holder</a>* h = (<a class="code" href="classbson_1_1BSONObj_1_1Holder.html">BSONObj::Holder</a>*)_b.buf();</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            decouple(); <span class="comment">// sets _b.buf() to NULL</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a>(h);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        }</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ac636b4a1a7e8a772268272e83c90ba13">  623</a></span>&#160;        <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> <a class="code" href="classbson_1_1BSONObjBuilder.html#ac636b4a1a7e8a772268272e83c90ba13" title="Fetch the object we have built.">done</a>() {</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a>(_done());</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        }</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        <span class="comment">// Like &#39;done&#39; above, but does not construct a BSONObj</span></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="comment">// to return to the caller.</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keywordtype">void</span> doneFast() {</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            (void)_done();</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div>
<div class="line"><a name="l00638"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a421aa615768c45a9f6f2a81adb0e4f5f">  638</a></span>&#160;        <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> <a class="code" href="classbson_1_1BSONObjBuilder.html#a421aa615768c45a9f6f2a81adb0e4f5f" title="Peek at what is in the builder, but leave the builder ready for more appends.">asTempObj</a>() {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> temp(_done());</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            _b.setlen(_b.len()-1); <span class="comment">//next append should overwrite the EOO</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            _doneCalled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            <span class="keywordflow">return</span> temp;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        }</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="comment">/* assume ownership of the buffer</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment">            you must then free it (with free()) */</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keywordtype">char</span>* decouple(<span class="keywordtype">int</span>&amp; l) {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            <span class="keywordtype">char</span> *x = _done();</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            assert( x );</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            l = _b.len();</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            _b.decouple();</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        }</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <span class="keywordtype">void</span> decouple() {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            _b.decouple();  <span class="comment">// post done() call version.  be sure jsobj frees...</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keywordtype">void</span> appendKeys( <span class="keyword">const</span> BSONObj&amp; keyPattern , <span class="keyword">const</span> BSONObj&amp; values );</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">string</span> numStr( <span class="keywordtype">int</span> i ) {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            <span class="keywordflow">if</span> (i&gt;=0 &amp;&amp; i&lt;100)</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                <span class="keywordflow">return</span> numStrs[i];</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            StringBuilder o;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            o &lt;&lt; i;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            <span class="keywordflow">return</span> o.str();</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        }</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#ada3d7b9ed84c0cf67cbd6c0b2fdec1ad">  669</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">BSONObjBuilderValueStream</a> &amp;<a class="code" href="classbson_1_1BSONObjBuilder.html#ada3d7b9ed84c0cf67cbd6c0b2fdec1ad" title="Stream oriented way to add field names and values.">operator&lt;&lt;</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * name ) {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            _s.endField( name );</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            <span class="keywordflow">return</span> _s;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        }</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div>
<div class="line"><a name="l00675"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a4bfd8233cf856e5dd7a00ec2380efaea">  675</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; <a class="code" href="classbson_1_1BSONObjBuilder.html#a4bfd8233cf856e5dd7a00ec2380efaea" title="Stream oriented way to add field names and values.">operator&lt;&lt;</a>( <a class="code" href="structbson_1_1GENOIDLabeler.html" title="Utility class to auto assign object IDs.">GENOIDLabeler</a> ) { <span class="keywordflow">return</span> genOID(); }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="comment">// prevent implicit string conversions which would allow bad things</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="comment">// like BSON( BSON( &quot;foo&quot; &lt;&lt; 1 ) &lt;&lt; 2 )</span></div>
<div class="line"><a name="l00679"></a><span class="lineno"><a class="code" href="structbson_1_1BSONObjBuilder_1_1ForceExplicitString.html">  679</a></span>&#160;        <span class="keyword">struct </span><a class="code" href="structbson_1_1BSONObjBuilder_1_1ForceExplicitString.html">ForceExplicitString</a> {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <a class="code" href="structbson_1_1BSONObjBuilder_1_1ForceExplicitString.html">ForceExplicitString</a>( <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;str ) : str_( str ) {}</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            <span class="keywordtype">string</span> str_;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        };</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a05da3e904f83da7a31092430d32dd240">  685</a></span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilderValueStream.html">BSONObjBuilderValueStream</a> &amp;operator&lt;&lt;( <span class="keyword">const</span> <a class="code" href="structbson_1_1BSONObjBuilder_1_1ForceExplicitString.html">ForceExplicitString</a>&amp; name )</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;          { <span class="keywordflow">return</span> <a class="code" href="classbson_1_1BSONObjBuilder.html#a05da3e904f83da7a31092430d32dd240" title="Stream oriented way to add field names and values.">operator&lt;&lt;</a>( name.str_.c_str() ); }</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <a class="code" href="classbson_1_1Labeler.html">Labeler</a> operator&lt;&lt;( <span class="keyword">const</span> <a class="code" href="structbson_1_1Labeler_1_1Label.html">Labeler::Label</a> &amp;l ) {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            massert( 10336 ,  <span class="stringliteral">&quot;No subobject started&quot;</span>, _s.subobjStarted() );</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            <span class="keywordflow">return</span> _s &lt;&lt; l;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        }</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        BSONObjBuilderValueStream&amp; operator&lt;&lt;( const BSONField&lt;T&gt;&amp; f ) {</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            _s.endField( f.name().c_str() );</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            <span class="keywordflow">return</span> _s;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        }</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        BSONObjBuilder&amp; operator&lt;&lt;( const BSONFieldValue&lt;T&gt;&amp; v ) {</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            append( v.name().c_str() , v.value() );</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        }</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00708"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a599ecbb38f00675da1e0d7e1531b166b">  708</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classbson_1_1BSONObjBuilder.html#a599ecbb38f00675da1e0d7e1531b166b">owned</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;_b == &amp;_buf; }</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <a class="code" href="classbson_1_1BSONObjIterator.html" title="iterator for a BSONObj">BSONObjIterator</a> iterator() <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordtype">bool</span> hasField( <span class="keyword">const</span> StringData&amp; name ) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keywordtype">int</span> len()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _b.len(); }</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        BufBuilder&amp; bb() { <span class="keywordflow">return</span> _b; }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordtype">char</span>* _done() {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            <span class="keywordflow">if</span> ( _doneCalled )</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <span class="keywordflow">return</span> _b.buf() + _offset;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            _doneCalled = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            _s.endField();</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            _b.appendNum((<span class="keywordtype">char</span>) EOO);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <span class="keywordtype">char</span> *data = _b.buf() + _offset;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordtype">int</span> size = _b.len() - _offset;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            *((<span class="keywordtype">int</span>*)data) = size;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="keywordflow">if</span> ( _tracker )</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                _tracker-&gt;got( size );</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            <span class="keywordflow">return</span> data;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        }</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        BufBuilder &amp;_b;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        BufBuilder _buf;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordtype">int</span> _offset;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        BSONObjBuilderValueStream _s;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        BSONSizeTracker * _tracker;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keywordtype">bool</span> _doneCalled;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">string</span> numStrs[100]; <span class="comment">// cache of 0 to 99 inclusive</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    };</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="preprocessor">#if defined (SDB_ENGINE) || defined (SDB_CLIENT)</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="preprocessor"></span>    <span class="keyword">class </span>BSONArrayBuilder : bsonnoncopyable, <span class="keyword">public</span> SDBObject {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00747"></a><span class="lineno"><a class="code" href="classbson_1_1BSONArrayBuilder.html">  747</a></span>&#160;<span class="preprocessor"></span>    <span class="keyword">class </span><a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a> : bsonnoncopyable {</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="preprocessor"></span>    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>() : _i(0), _b() {}</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>( BufBuilder &amp;_b ) : _i(0), _b(_b) {}</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>( <span class="keywordtype">int</span> initialSize ) : _i(0), _b(initialSize) {}</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>&amp; append(<span class="keyword">const</span> T&amp; x) {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            _b.append(num(), x);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        }</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        </div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>&amp; appendTimestamp(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">long</span> val) {</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            _b.appendTimestamp(num(),val);</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>&amp; append(<span class="keyword">const</span> <a class="code" href="classbson_1_1BSONElement.html" title="BSONElement represents an &quot;element&quot; in a BSONObj.">BSONElement</a>&amp; e) {</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            _b.appendAs(e, num());</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        }</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <a class="code" href="classbson_1_1BSONArrayBuilder.html">BSONArrayBuilder</a>&amp; operator&lt;&lt;(<span class="keyword">const</span> T&amp; x) {</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            <span class="keywordflow">return</span> append(x);</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        }</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        <span class="keywordtype">void</span> appendNull() {</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            _b.appendNull(num());</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        }</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno"><a class="code" href="classbson_1_1BSONArrayBuilder.html#a2975e7b1017de75fd171792a35d9ff9e">  783</a></span>&#160;        <a class="code" href="structbson_1_1BSONArray.html">BSONArray</a> <a class="code" href="classbson_1_1BSONArrayBuilder.html#a2975e7b1017de75fd171792a35d9ff9e" title="destructive - ownership moves to returned BSONArray">arr</a>() { <span class="keywordflow">return</span> <a class="code" href="structbson_1_1BSONArray.html">BSONArray</a>(_b.obj()); }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> done() { <span class="keywordflow">return</span> _b.done(); }</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keywordtype">void</span> doneFast() { _b.doneFast(); }</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        BSONArrayBuilder&amp; append(<span class="keyword">const</span> StringData&amp; name, <span class="keyword">const</span> T&amp; x) {</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            fill( name );</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            append( x );</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        }</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="comment">// These two just use next position</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        BufBuilder &amp;subobjStart() { <span class="keywordflow">return</span> _b.subobjStart( num() ); }</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        BufBuilder &amp;subarrayStart() { <span class="keywordflow">return</span> _b.subarrayStart( num() ); }</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="comment">// These fill missing entries up to pos. if pos is &lt; next pos is ignored</span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        BufBuilder &amp;subobjStart(<span class="keywordtype">int</span> pos) {</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            fill(pos);</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keywordflow">return</span> _b.subobjStart( num() );</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        }</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        BufBuilder &amp;subarrayStart(<span class="keywordtype">int</span> pos) {</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            fill(pos);</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            <span class="keywordflow">return</span> _b.subarrayStart( num() );</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        }</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="comment">// These should only be used where you really need interface compatability with BSONObjBuilder</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        <span class="comment">// Currently they are only used by update.cpp and it should probably stay that way</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        BufBuilder &amp;subobjStart( <span class="keyword">const</span> StringData&amp; name ) {</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            fill( name );</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="keywordflow">return</span> _b.subobjStart( num() );</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        }</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        BufBuilder &amp;subarrayStart( <span class="keyword">const</span> <span class="keywordtype">char</span> *name ) {</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            fill( name );</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            <span class="keywordflow">return</span> _b.subarrayStart( num() );</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        }</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        <span class="keywordtype">void</span> appendArray( <span class="keyword">const</span> StringData&amp; name, BSONObj subObj ) {</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            fill( name );</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            _b.appendArray( num(), subObj );</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        }</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordtype">void</span> appendAs( <span class="keyword">const</span> BSONElement &amp;e, <span class="keyword">const</span> <span class="keywordtype">char</span> *name) {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            fill( name );</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;            append( e );</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        }</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="keywordtype">int</span> len()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _b.len(); }</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        <span class="keywordtype">void</span> fill( <span class="keyword">const</span> StringData&amp; name ) {</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            <span class="keywordtype">char</span> *r;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="keywordtype">long</span> <span class="keywordtype">int</span> n = strtol( name.data(), &amp;r, 10 );</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            <span class="keywordflow">if</span> ( *r )</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                uasserted( 13048, (<span class="keywordtype">string</span>)<span class="stringliteral">&quot;can&#39;t append to array using string&quot;</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                  <span class="stringliteral">&quot; field name [&quot;</span> + name.data() + <span class="stringliteral">&quot;]&quot;</span> );</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            fill(n);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        }</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        <span class="keywordtype">void</span> fill (<span class="keywordtype">int</span> upTo){</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            <span class="keywordflow">while</span>( _i &lt; upTo )</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                append( nullElt() );</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        }</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        <span class="keyword">static</span> BSONElement nullElt() {</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            <span class="keyword">static</span> BSONObj n = nullObj();</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="keywordflow">return</span> n.firstElement();</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        }</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <span class="keyword">static</span> BSONObj nullObj() {</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            BSONObjBuilder _b;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            _b.appendNull( <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="keywordflow">return</span> _b.obj();</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        }</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keywordtype">string</span> num() { <span class="keywordflow">return</span> _b.numStr(_i++); }</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordtype">int</span> _i;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        BSONObjBuilder _b;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    };</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">template</span> &lt; <span class="keyword">class</span> T &gt;</div>
<div class="line"><a name="l00866"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#af83c7edfbd4ad2f89a5568f34dcfc0af">  866</a></span>&#160;    <span class="keyword">inline</span> <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; BSONObjBuilder::append( <span class="keyword">const</span> StringData&amp; fieldName,</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;      <span class="keyword">const</span> vector&lt; T &gt;&amp; vals ) {</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> arrBuilder;</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; vals.size(); ++i )</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            arrBuilder.<a class="code" href="classbson_1_1BSONObjBuilder.html#a027d9a8d8bae9244e2a91fc8944c43aa" title="append element to the object we are building">append</a>( numStr( i ), vals[ i ] );</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        appendArray( fieldName, arrBuilder.<a class="code" href="classbson_1_1BSONObjBuilder.html#ac636b4a1a7e8a772268272e83c90ba13" title="Fetch the object we have built.">done</a>() );</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keyword">template</span> &lt; <span class="keyword">class</span> L &gt;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keyword">inline</span> <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; _appendIt( <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; _this, <span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> L&amp; vals ) {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a> arrBuilder;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        <span class="keywordtype">int</span> n = 0;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">typename</span> L::const_iterator i = vals.begin(); i != vals.end(); i++ )</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            arrBuilder.<a class="code" href="classbson_1_1BSONObjBuilder.html#a027d9a8d8bae9244e2a91fc8944c43aa" title="append element to the object we are building">append</a>( BSONObjBuilder::numStr(n++), *i );</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;        _this.<a class="code" href="classbson_1_1BSONObjBuilder.html#a5efeb19109a007424cb93af31a2b8024" title="add a subobject as a member with type Array.">appendArray</a>( fieldName, arrBuilder.<a class="code" href="classbson_1_1BSONObjBuilder.html#ac636b4a1a7e8a772268272e83c90ba13" title="Fetch the object we have built.">done</a>() );</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;        <span class="keywordflow">return</span> _this;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    }</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="keyword">template</span> &lt; <span class="keyword">class</span> T &gt;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="keyword">inline</span> BSONObjBuilder&amp; BSONObjBuilder::append( <span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> list&lt; T &gt;&amp; vals ) {</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <span class="keywordflow">return</span> _appendIt&lt; list&lt; T &gt; &gt;( *<span class="keyword">this</span>, fieldName, vals );</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    }</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keyword">template</span> &lt; <span class="keyword">class</span> T &gt;</div>
<div class="line"><a name="l00891"></a><span class="lineno"><a class="code" href="classbson_1_1BSONObjBuilder.html#a92ececb7194a2f5cc23eca8d269fed30">  891</a></span>&#160;    <span class="keyword">inline</span> <a class="code" href="classbson_1_1BSONObjBuilder.html" title="Utility for creating a BSONObj.">BSONObjBuilder</a>&amp; BSONObjBuilder::append( <span class="keyword">const</span> StringData&amp; fieldName, <span class="keyword">const</span> set&lt; T &gt;&amp; vals ) {</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keywordflow">return</span> _appendIt&lt; set&lt; T &gt; &gt;( *<span class="keyword">this</span>, fieldName, vals );</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    }</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="comment">// $or helper: OR(BSON(&quot;x&quot; &lt;&lt; GT &lt;&lt; 7), BSON(&quot;y&quot; &lt;&lt; LT 6));</span></div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keyword">inline</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a> OR(<span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a>&amp; a, <span class="keyword">const</span> <a class="code" href="classbson_1_1BSONObj.html" title="C++ representation of a &quot;BSON&quot; object – that is, an extended JSON-style object in a binary representa...">BSONObj</a>&amp; b)</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="bsonmisc_8h.html#ab8032d457f0074b50c2aca379a0a545a" title="Use BSON macro to build a BSONObj from a stream.">BSON</a>( <span class="stringliteral">&quot;$or&quot;</span> &lt;&lt; <a class="code" href="bsonmisc_8h.html#a7c39efe531a0b3edf6424f917345e3a7" title="Use BSON_ARRAY macro like BSON macro, but without keys.">BSON_ARRAY</a>(a &lt;&lt; b) ); }</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c)</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="bsonmisc_8h.html#ab8032d457f0074b50c2aca379a0a545a" title="Use BSON macro to build a BSONObj from a stream.">BSON</a>( <span class="stringliteral">&quot;$or&quot;</span> &lt;&lt; <a class="code" href="bsonmisc_8h.html#a7c39efe531a0b3edf6424f917345e3a7" title="Use BSON_ARRAY macro like BSON macro, but without keys.">BSON_ARRAY</a>(a &lt;&lt; b &lt;&lt; c) ); }</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c,</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;      <span class="keyword">const</span> BSONObj&amp; d)</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="bsonmisc_8h.html#ab8032d457f0074b50c2aca379a0a545a" title="Use BSON macro to build a BSONObj from a stream.">BSON</a>( <span class="stringliteral">&quot;$or&quot;</span> &lt;&lt; <a class="code" href="bsonmisc_8h.html#a7c39efe531a0b3edf6424f917345e3a7" title="Use BSON_ARRAY macro like BSON macro, but without keys.">BSON_ARRAY</a>(a &lt;&lt; b &lt;&lt; c &lt;&lt; d) ); }</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c,</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;      <span class="keyword">const</span> BSONObj&amp; d, <span class="keyword">const</span> BSONObj&amp; e)</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="bsonmisc_8h.html#ab8032d457f0074b50c2aca379a0a545a" title="Use BSON macro to build a BSONObj from a stream.">BSON</a>( <span class="stringliteral">&quot;$or&quot;</span> &lt;&lt; <a class="code" href="bsonmisc_8h.html#a7c39efe531a0b3edf6424f917345e3a7" title="Use BSON_ARRAY macro like BSON macro, but without keys.">BSON_ARRAY</a>(a &lt;&lt; b &lt;&lt; c &lt;&lt; d &lt;&lt; e) ); }</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keyword">inline</span> BSONObj OR(<span class="keyword">const</span> BSONObj&amp; a, <span class="keyword">const</span> BSONObj&amp; b, <span class="keyword">const</span> BSONObj&amp; c,</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;      <span class="keyword">const</span> BSONObj&amp; d, <span class="keyword">const</span> BSONObj&amp; e, <span class="keyword">const</span> BSONObj&amp; f)</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        { <span class="keywordflow">return</span> <a class="code" href="bsonmisc_8h.html#ab8032d457f0074b50c2aca379a0a545a" title="Use BSON macro to build a BSONObj from a stream.">BSON</a>( <span class="stringliteral">&quot;$or&quot;</span> &lt;&lt; <a class="code" href="bsonmisc_8h.html#a7c39efe531a0b3edf6424f917345e3a7" title="Use BSON_ARRAY macro like BSON macro, but without keys.">BSON_ARRAY</a>(a &lt;&lt; b &lt;&lt; c &lt;&lt; d &lt;&lt; e &lt;&lt; f) ); }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jul 6 2014 16:01:12 for SequoiaDB by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.2
</small></address>
</body>
</html>
