<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_423_zyg_hm">
  <title>$+Identifier</title>
  <body>
    <section><title>Grammar</title>
      <p><codeblock>{"field name.$+Identifier":value}</codeblock></p>
    </section>
    <section><title>Description</title><p><b>$+Identifier</b> is a special command character, this command breaks act only on <b>array of object</b>，<b>identifier</b> is an integer, 
      such as <b>$1</b>,<b>$3</b>, the equivalent of a temporary storage identifier, will match the success of indexed array elements stored. The following is wrong to write format: $5.4, $a2, $3c, $MA.</p>
      This command only affects the character array, the array is used instead of the index Key and can be matched to pass an index value of the first parameter to the method update <xref href="../../methods/topics/dbupdate_en.dita">update</xref> of the rule.</section>
    <section><title>Example</title>
      <ul>
        <li>
          <p>Inquiry</p>
          <p>Record: {a:[1,2,3,4,5]};{a:[1,4,5]};{a:[4,2,1]} now want to check out the array element exists record 5, use the following command.</p>
          <codeblock>db.foo.bar.find({"a.$1":5},{a:1})</codeblock>
          <p>As long as the existence of a record array object element 5, will be able to return. Return the following results: <codeblock>{ "a": [ 1, 4, 5 ] }
{ "a": [ 1, 2, 3, 4, 5 ] }</codeblock></p>
        </li>
        <li>Update <p>1. Record { a : [ 1, 2, 3, 4, 5 ]
          }, and now you want to modify a array of elements, the elements of the value 4 into 100, use the following command. <codeblock>db.foo.bar.update({$set:{"a.$1":100}},{"a.$1":4})</codeblock></p>
          <p>When matching element index Key 4 is 3, so the update rules 
            { "$set" : { "a.$1": 100 } } , and $1 is 3, the system automatically converts the update rules to { “$set” : { “a.3” : 100 } }
          </p><p>After updating the record as follows: <codeblock>{ a : [ 1, 2, 3, 100, 5 ] }</codeblock></p><p>2. Record { a : [ 1,
            2, 3, 4, 5 ], b : [ 6, 7, 8 ]
            }, now want to modify the elements of the array a, the element value was changed 4 to 100, and the elements of the array b changes in value of 6 to 200, use the following command. <codeblock>db.foo.bar.update({ "$set" : { "a.$1" : 100, "b.$2" : 200 } },{ "a.$1": 4, "b.$2" : 6  })</codeblock></p>
          <p>After updating the record as follows: <codeblock>{ a : [ 1, 2, 3, 100, 5 ], b : [ 200, 7, 8 ] }</codeblock></p><note>If there are multiple elements comply with the rules, 
            then only modify the first. In the following example: </note>3. Record 
          {  a : [ 1, 2, 2, 2, 5 ] 
          }, now want to modify a array of elements, the elements changed to a value of 2 to 100, use the following command. <codeblock>db.foo.bar.update({ "$set" : { "a.$1" : 100 } },{ "a.$1": 2 })</codeblock><p>After updating the record as follows:</p><p>
            <codeblock>{ a : [ 1, 100, 2, 2, 5 ]  }</codeblock>
          </p>
        </li>
      </ul>
    </section>
  </body>
  <related-links>
    <link href="elemMatch_en.dita" format="dita" type="topic"></link>
    <link href="psize_en.dita" format="dita" type="topic"></link>
  </related-links>
</topic>
