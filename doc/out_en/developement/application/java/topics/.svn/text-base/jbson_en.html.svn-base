
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en-us" xml:lang="en-us">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="copyright" content="(C) Copyright 2005"/>
<meta name="DC.rights.owner" content="(C) Copyright 2005"/>
<meta name="DC.Type" content="topic"/>
<meta name="DC.Title" content="Java BSON Usage"/>
<meta name="description" content="Java BSON data type SequoiaDB supports various BSON data type. For more details, please check Database Concept-Database-Document section. Java BSON Structured Data Type Integer/Float Java BSON ..."/>
<meta name="DC.Relation" scheme="URI" content="../../../../developement/application/java/topics/java_en.html"/>
<meta name="DC.Format" content="XHTML"/>
<meta name="DC.Identifier" content="topic_zdx_1vx_vp"/>
<link rel="stylesheet" type="text/css" href="../../../../commonltr.css"/>
<link rel="stylesheet" type="text/css" href="../../../../assets/webhelp_topic.css"/>
<title>Java BSON Usage</title>
<script type="text/javascript" src="../../../../assets/jquery-1.3.2.js"> </script><script type="text/javascript" src="../../../../assets/jquery-ui-1.8.2.custom.min.js"> </script><script type="text/javascript" src="../../../../assets/frames_redirect.js"> </script><script type="text/javascript"><!--
    var prefix = "../../../../../index.html";
    var ratingFile = "";
    redirectToToc(window.location.search);
    function highlightSearchTerm(){
        if(parent.termsToHighlight != null){
        // highlight each term in the content view  
          for(i = 0 ; i < parent.termsToHighlight.length ; i++){        
              $('*', window.parent.frames[1].document).highlight(parent.termsToHighlight[i]);
          }
        }
    }
//--></script></head>
<body onload="highlightSearchTerm()" id="topic_zdx_1vx_vp"><a name="topic_zdx_1vx_vp"><!-- --></a>
<table class="nav"><tbody><tr><td><div class="navheader"><span class="frames" onclick="redirectFrames(location.pathname)"><script type="text/javascript"><!--
  if (parent.window.location.pathname == window.location.pathname ) document.write('With Frames');                    
                    --></script></span><a class="link" href="../../../../developement/application/java/topics/java_en.html" title="Java Driver"><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">Java Driver</span></a>  </div></td><td width="50%"><a class="navheader_parent_path" href="../../topics/application_en.html" title="SequoiaDB Application Development">SequoiaDB Application Development</a> / <a class="navheader_parent_path" href="../../../../developement/application/java/topics/java_en.html" title="Java Driver">Java Driver</a></td></tr></tbody></table>

  <h1 class="title topictitle1">Java BSON Usage</h1>

  <div class="body">    
    <div class="section"><h2 class="title sectiontitle">Java BSON data type</h2>
      
      <p class="p">SequoiaDB supports various BSON data type. For more details, please check <a class="xref" href="../../../../administration/concepts/database/topics/document_en.html">Database Concept-Database-Document</a> section.</p>

    </div>

    <div class="section"><h2 class="title sectiontitle">Java BSON Structured Data Type</h2>
      
      <ul class="ul">
        <li class="li"><p class="p">Integer/Float</p>
Java BSON structured integer/float type:<pre class="pre codeblock">// {a:123, b:3.14}
BSONObject obj = new BasicBSONObject();
obj.put("a", 123);
obj.put("b", 3.14);</pre>
</li>

        <li class="li"><p class="p">String</p>
Java BSON structured string type:<pre class="pre codeblock">// {a:"hi"}
BSONObject obj = new BasicBSONObject();
obj.put("a", "hi");</pre>
</li>

        <li class="li"><p class="p">null</p>
Java BSON structured null type:<pre class="pre codeblock">// {a:null}
BSONObject obj = new BasicBSONObject();
obj.put("a", null);</pre>
</li>

        <li class="li"><p class="p">object</p>
Java BSON structured nested object type:<pre class="pre codeblock">// {b:{a:1}}
BSONObject subObj = new BasicBSONObject();
subObj.put("a", 1);
BSONObject obj = new BasicBSONObject();
obj.put("b", subObj);</pre>
</li>

        <li class="li"><p class="p">array</p>
Java BSON uses org.bson.types/BasicBSONList to structure the array type:<pre class="pre codeblock">// {a:[0,1,2]}
BSONObject obj = new BasicBSONObject();
BSONObject arr = new BasicBSONList();
arr.put("0", 0);
arr.put("1", 1);
arr.put("2", 2);
obj.put("a", arr);</pre>
</li>

        <li class="li"><p class="p">Boolean</p>
Java BSON structured boolean type:<pre class="pre codeblock">// {a:true, b:false}
BSONObject obj = new BasicBSONObject();
obj.put("a", true);
obj.put("b", false);</pre>
</li>

        <li class="li"><p class="p">object ID</p>
Java BSON uses org.bson.types.ObjectId to generate the value of each "_id" field. Java BSON's ObjectID is 12 bits long which is a little different from the ObjectID introduced in <a class="xref" href="../../../../administration/concepts/database/topics/objectid.html">Database Concept-Databse-Document-ObjectID</a> section, currently, the 12 bits of a Java ObjectId are composed of three parts: 4 bits for a timestamp accurate to milliseconds, 4 bits for the identification of the system (physical machine).<pre class="pre codeblock">BSONObject obj = new BasicBSONObject();
ObjectId id1 = new ObjectId();
ObjectId id2 = new ObjectId("53bb5667c5d061d6f579d0bb");
obj.put("_id", id1);</pre>
</li>

        <li class="li"><p class="p">regex</p>
Java Bson uses java.util.regex.Pattern to structure the regex data type.<pre class="pre codeblock">BSONObject matcher = new BasicBSONObject();
Pattern obj = Pattern.compile("^2001",Pattern.CASE_INSENSITIVE);
matcher.put("serial_num", obj);
BSONObject modifier = new BasicBSONObject("$set", new BasicBSONObject("count",1000));
cl.update(matcher, modifier, null);</pre>
The above regex structures a matching condition; it modifies the value of the “count” field of all the records with a serial number that starts with 2001 into 1000.
          <div class="note note"><span class="notetitle">Note:</span> The above uses Pattern to structure the bson matcher, but if using matcher.toString(), the content will be:<pre class="pre codeblock">{ "serial_num" : { "$options" : "i" , "$regex" : "^2001"}}</pre>
通过以下 bson 构造方式也可以得到相同的内容：<pre class="pre codeblock">BSONObject matcher2 = new BasicBSONObject();
BSONObject obj2 = new BasicBSONObject();
obj2.put("$regex","^2001");
obj2.put("$options","i");		
matcher2.put("serial_num", obj2);</pre>
But matcher2 structured in the latter way is a common nested type instead of a regex.</div>
</li>

        <li class="li"><p class="p">Date</p>
Java BSON uses java.util.Date to structure the date type:<pre class="pre codeblock">BSONObject obj = new BasicBSONObject();
Date now = new Date();
obj.put("date", now);</pre>
</li>

        <li class="li"><p class="p">Binary</p>
Java BSON uses java.util.type.Binary to structure the binary type:<pre class="pre codeblock">BSONObject obj = new BasicBSONObject();
String str = "hello world";
byte[] arr = str.getBytes();
Binary bindata = new Binary(arr);
obj.put("bindata", bindata);</pre>
</li>

        <li class="li"><p class="p">TimeStamp</p>
Java BSON uses org.bson.types.BSONTimestamp to structre the time stamp type:<pre class="pre codeblock">int sec = 1404189030 ; // 2014-07-01 12:30:30
BSONObject obj = new BasicBSONObject();
BSONTimestamp ts = new BSONTimestamp(sec, 0);
obj.put("timestamp", ts);</pre>
</li>

      </ul>

    </div>

  </div>

<div class="related-links"/>
<div class="navfooter"><a class="link" href="../../../../developement/application/java/topics/java_en.html" title="Java Driver"><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">Java Driver</span></a>  <script type="text/javascript"><!--         
    function expand(){
        parent.tocwin.expandToTopic(window.location.href, this.getAttribute('href'));
    }
    var aArray = document.getElementsByTagName('a');
    var i;
    for (i = 0; i< aArray.length; i++){
      aArray[i].onclick = expand;
    }
//--></script></div><div class="footer"><a href="http://www.sequoiadb.com" target="_blank"><img src="../../../../assets/images/sequoiadb_logo.png" alt="SequoiaDB"/></a>SequoiaDB Version 1.11
          
    </div>
</body>
</html>