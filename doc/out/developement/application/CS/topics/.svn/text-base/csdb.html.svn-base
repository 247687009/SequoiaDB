
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en-us" xml:lang="en-us">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="copyright" content="(C) Copyright 2005"/>
<meta name="DC.rights.owner" content="(C) Copyright 2005"/>
<meta name="DC.Type" content="topic"/>
<meta name="DC.Title" content="C# 开发基础"/>
<meta name="description" content="这里介绍如何使用 C# 驱动接口编写使用 SequoiaDB 数据库的程序。该文档介绍了 SequoiaDB 数据库 C# 驱动的简单示例，详细的使用规范可参照官方的 C# API 文档。 命名空间 在使用 C# 驱动的相关 API 之前，你必须在源代码中添加如下的 using 申明： using SequoiaDB; using SequoiaDB.Bson; 数据操作 连接数据库和身份验证 ..."/>
<meta name="DC.Relation" scheme="URI" content="../../../../developement/application/CS/topics/cs.html"/>
<meta name="DC.Format" content="XHTML"/>
<meta name="DC.Identifier" content="topic_wqz_t1d_bm"/>
<link rel="stylesheet" type="text/css" href="../../../../commonltr.css"/>
<link rel="stylesheet" type="text/css" href="../../../../assets/webhelp_topic.css"/>
<title>C# 开发基础</title>
<script type="text/javascript" src="../../../../assets/jquery-1.3.2.js"> </script><script type="text/javascript" src="../../../../assets/jquery-ui-1.8.2.custom.min.js"> </script><script type="text/javascript" src="../../../../assets/frames_redirect.js"> </script><script type="text/javascript"><!--
    var prefix = "../../../../../index.html";
    var ratingFile = "";
    redirectToToc(window.location.search);
    function highlightSearchTerm(){
        if(parent.termsToHighlight != null){
        // highlight each term in the content view  
          for(i = 0 ; i < parent.termsToHighlight.length ; i++){        
              $('*', window.parent.frames[1].document).highlight(parent.termsToHighlight[i]);
          }
        }
    }
//--></script></head>
<body onload="highlightSearchTerm()" id="topic_wqz_t1d_bm"><a name="topic_wqz_t1d_bm"><!-- --></a>
<table class="nav"><tbody><tr><td><div class="navheader"><span class="frames" onclick="redirectFrames(location.pathname)"><script type="text/javascript"><!--
  if (parent.window.location.pathname == window.location.pathname ) document.write('With Frames');                    
                    --></script></span><a class="link" href="../../../../developement/application/CS/topics/cs.html" title="C# 驱动"><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">C# 驱动</span></a>  </div></td><td width="50%"><a class="navheader_parent_path" href="../../topics/application.html" title="SequoiaDB 应用程序开发">SequoiaDB 应用程序开发</a> / <a class="navheader_parent_path" href="../../../../developement/application/CS/topics/cs.html" title="C# 驱动">C# 驱动</a></td></tr></tbody></table>

  <h1 class="title topictitle1">C# 开发基础</h1>

  <div class="body">
      <p class="p">这里介绍如何使用 C# 驱动接口编写使用 SequoiaDB 数据库的程序。该文档介绍了 SequoiaDB 数据库 C# 驱动的简单示例，详细的使用规范可参照官方的 <a class="xref" href="../../../../cs/html/index.html">C# API</a> 文档。</p>

      <div class="section"><h2 class="title sectiontitle">命名空间</h2>
          
          <p class="p">在使用 C# 驱动的相关 API 之前，你必须在源代码中添加如下的 using 申明：</p>
<pre class="pre codeblock">using SequoiaDB;
using SequoiaDB.Bson;</pre>
          
      </div>

      <div class="section"><h2 class="title sectiontitle">数据操作</h2>
          
      </div>
      
    <div class="section">      
      <ul class="ul">
        <li class="li">连接数据库和身份验证
            <p class="p">若数据库没有创建用户，则可以匿名连接到数据库：</p>
<pre class="pre codeblock">string addr = "127.0.0.1:11810";
Sequoiadb sdb = new Sequoiadb(addr);
try
{
    sdb.Connect();
}
catch (BaseException e)
{
    Console.WriteLine("ErrorCode:{0}, ErrorType:{1}", e.ErrorCode, e.ErrorType);
    Console.WriteLine(e.Message);
}
catch (System.Exception e)
{
    Console.WriteLine(e.StackTrace);
    }</pre>

            <p class="p">否则，连接的时候必须指定用户名和密码：</p>
<pre class="pre codeblock">string addr = "127.0.0.1:11810";
Sequoiadb sdb = new Sequoiadb(addr);
try
{
    sdb.Connect("testusr", "testpwd");
}
catch (BaseException e)
{
    Console.WriteLine("ErrorCode:{0}, ErrorType:{1}", e.ErrorCode, e.ErrorType);
    Console.WriteLine(e.Message);
}
catch (System.Exception e)
{
    Console.WriteLine(e.StackTrace);
    }</pre>

            <p class="p">这里给出了异常信息的 try 和 catch 块，下面的所有操作都会抛出同样的异常信息，因此不再给出相关的 try 和 catch 块。</p>
</li>

        <li class="li">断开与数据库连接
          <pre class="pre codeblock">// do not forget to disconnect from sdb
sdb.Disconnect();</pre>

        </li>

        <li class="li">得到或创建集合空间和集合
          <p class="p">根据名字，得到对应的 CollectionSpace，如果不存在，则创建：</p>
<pre class="pre codeblock">// create collectionspace, if collectionspace exists get it
string csName = "TestCS";
CollectionSpace cs = sdb.GetCollecitonSpace(csName);
if (cs == null)
cs = sdb.CreateCollectionSpace(csName);
// or sdb.CreateCollectionSpace(csName, pageSize), need to specify the pageSize</pre>

            <p class="p">根据名字，得到对应的 Collection，如果不存在，则创建：</p>
<pre class="pre codeblock">// create collection, if collection exists get it
string clName = "TestCL";
DBCollection dbc = cs.GetCollection(clName);
if (dbc == null)
dbc = cs.CreateCollection(clName);
//or cs.createCollection(collectionName, options), create collection with some options</pre>

        </li>

        <li class="li">对 Collection 进行插入操作<p class="p">创建需要插入的数据 BsonDocument 并插入：</p>
<pre class="pre codeblock">BsonDocument insertor = new BsonDocument();
string date = DateTime.Now.ToString();
insertor.Add("operation", "Insert");
insertor.Add("date", date);
ObjectId id = dbc.Insert(insertor);</pre>

            <p class="p">当然，BsonDocument 中还可以嵌套 BsonDocument 对象；而且你还可以直接 new 一个完整的 BsonDocument，而不需要通过 Add 方法：</p>
<pre class="pre codeblock">BsonDocumentinsertor = new BsonDocument
{
    {"FirstName","John"},
    {"LastName","Smith"},
    {"Age",50},
    {"id",i},
    {"Address",
        new BsonDocument
        {
            {"StreetAddress","212ndStreet"},
            {"City","NewYork"},
            {"State","NY"},
            {"PostalCode","10021"}
        }
    },
    {"PhoneNumber",
        new BsonDocument
        {
            {"Type","Home"},
            {"Number","212555-1234"}
        }
    }
};
插入多条数据：
//bulkinsert
List&lt;BsonDocument&gt; insertor=new List &lt;BsonDocument&gt; ();
for(inti=0;i&lt;10;i++)
{
    BsonDocumentobj=new BsonDocument();
    obj.Add("operation","BulkInsert");
    obj.Add("date",DateTime.Now.ToString());
    insertor.Add(obj);
}
dbc.BulkInsert(insertor,0);</pre>
</li>

        <li class="li">索引的相关操作
                        <p class="p">创建索引：</p>
<pre class="pre codeblock">//createindexkey,indexonattribute'Id'byASC(1)/DESC(-1)
BsonDocument key = new BsonDocument();
key.Add("id", 1);
string name = "index name";
bool isUnique = true;
bool isEnforced = true;
dbc.CreateIndex(name, key, isUnique, isEnforced);</pre>

            <p class="p">删除索引：</p>
<pre class="pre codeblock">string name = "index name";
dbc.DropIndex(name);</pre>
</li>

        <li class="li">查询操作 <p class="p">进行查询操作，需要使用游标对查询结果进行遍历，而且可以先得到当前 Collection 的索引，如果不为空，可作为制定访问计划（hint）用于查询：
                        </p>
<pre class="pre codeblock">DBCursor icursor = dbc.GetIndex(name);
BsonDocument index = icursor.Current();</pre>
<p class="p">构建相应的 BsonDocument 对象用于查询，包括：查询匹配规则（matcher，包含相应的查询条件），域选择（selector），排序规则（orderBy，增序或降序），制定访问计划（hint），跳过记录个数（0），返回记录个数（-1：返回所有数据）。查询后，得到对应的 Cursor，用于遍历查询得到的结果：</p>
<pre class="pre codeblock">BsonDocument matcher = new BsonDocument();
BsonDocument conditon = new BsonDocument();
conditon.Add("$gte", 0);
conditon.Add("$lte", 9);
matcher.Add("id", conditon);
BsonDocument selector = new BsonDocument();
selector.Add("id", null);
selector.Add("Age", null);
BsonDocument orderBy = new BsonDocument();
orderBy.Add("id", -1);
BsonDocument hint = null;
if (index != null)
    hint = index;
else
    hint = new BsonDocument();
DBCursor cursor = dbc.Query(matcher, selector, orderBy, hint, 0, -1);</pre>
<p class="p">使用 DBCursor 游标进行遍历：</p>
<pre class="pre codeblock">while (cursor.Next() != null)
Console.WriteLine(cursor.Current());</pre>
</li>

        <li class="li">删除操作
                    <p class="p">构建相应的 BsonDocument 对象，用于设置删除的条件：</p>
<pre class="pre codeblock">//createthedeletecondition
BsonDocument drop = new BsonDocument();
drop.Add("Last Name", "Smith");
coll.Delete(drop);</pre>
</li>

        <li class="li">更新操作
                        <p class="p">构建相应的 BsonDocument 对象，用于设置更新条件，你还可以创建 DBQuery 对象封装所有的查询或更新规则：</p>
<pre class="pre codeblock">DBQuery query = new DBQuery();
BsonDocument updater = new BsonDocument();
BsonDocument matcher = new BsonDocument();
BsonDocument modifier = new BsonDocument();
updater.Add("Age", 25);
modifier.Add("$set", updater);
matcher.Add("First Name", "John");
query.Matcher = matcher;
query.Modifier = modifier;
dbc.Update(query);</pre>
<p class="p">更新操作，如果没有满足 matcher 的条件，则插入此记录：</p>
<pre class="pre codeblock">dbc.Upsert(query);</pre>
</li>
        
      </ul>

    </div>

  </div>

<div class="related-links"/>
<div class="navfooter"><a class="link" href="../../../../developement/application/CS/topics/cs.html" title="C# 驱动"><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">C# 驱动</span></a>  <script type="text/javascript"><!--         
    function expand(){
        parent.tocwin.expandToTopic(window.location.href, this.getAttribute('href'));
    }
    var aArray = document.getElementsByTagName('a');
    var i;
    for (i = 0; i< aArray.length; i++){
      aArray[i].onclick = expand;
    }
//--></script></div><div class="footer"><a href="http://www.sequoiadb.com" target="_blank"><img src="../../../../assets/images/sequoiadb_logo.png" alt="SequoiaDB"/></a>SequoiaDB Version 1.11
          
    </div>
</body>
</html>