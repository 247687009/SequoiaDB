<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>SequoiaDB: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SequoiaDB
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.html"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacebson.html">bson</a></li><li class="navelem"><a class="el" href="structbson_1_1BSONArray.html">BSONArray</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">bson::BSONArray Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="structbson_1_1BSONArray.html">bson::BSONArray</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#acc09c8c4aab8a8f8498227ff9469c932">addFields</a>(BSONObj &amp;from, set&lt; string &gt; &amp;fields)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>appendSelfToBufBuilder</b>(BufBuilder &amp;b) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a7f908e3b78c4ae783bc4651e8ee45406">begin</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>BSONArray</b>() (defined in <a class="el" href="structbson_1_1BSONArray.html">bson::BSONArray</a>)</td><td class="entry"><a class="el" href="structbson_1_1BSONArray.html">bson::BSONArray</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>BSONArray</b>(const BSONObj &amp;obj) (defined in <a class="el" href="structbson_1_1BSONArray.html">bson::BSONArray</a>)</td><td class="entry"><a class="el" href="structbson_1_1BSONArray.html">bson::BSONArray</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">explicit</span></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a3cf9eddbadc11ecdf95dab8eba1e2aa1">BSONObj</a>(const char *msgdata, bool check=true)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">explicit</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ae6e1d59fd67de2893b3bd2f8ed7fd642">BSONObj</a>(Holder *holder)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">explicit</span></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a759f68fe17d400745a88444e9374fa2b">BSONObj</a>()</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>clientReadable</b>() const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a1efb29b27b47aad47467379f7e015732">copy</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>dump</b>() const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a333f92e5c5c5980df8212817f338c5f1">elems</a>(vector&lt; BSONElement &gt; &amp;) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ac37cad2705b6876b3ea89900e7fdb174">elems</a>(list&lt; BSONElement &gt; &amp;) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>equal</b>(const BSONObj &amp;r) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>Equality</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a99bf0b7b71c89c461c20077032199c2b">extractFields</a>(const BSONObj &amp;pattern, bool fillWithNull=false) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ad878aea7efb1f3f573552677228656d6">extractFieldsUnDotted</a>(BSONObj pattern) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>filterFieldsUndotted</b>(const BSONObj &amp;filter, bool inFilter) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a1ab6d33175811acc1f1719a9872f4698">firstElement</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ac9ecfe6d43bb0d52c593461b4db5473e">firstElementFieldName</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a30a4e142d97b835602d7dd975a547228">getBoolField</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a3331bfabde4a014ecf2658e63249a7c5">getField</a>(const StringData &amp;name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a4cbf4bfc14d08ade7e8f0dd6ceb5a4e0">getFieldDotted</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ad075a4bf181486b1ba16d570e4d3c7c7">getFieldDotted</a>(const string &amp;name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#acf3e481cfe68d8338e260b328e7d327f">getFieldDottedOrArray</a>(const char *&amp;name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a3c4d9192e6dc44918c170a8c91ef6647">getFieldNames</a>(set&lt; string &gt; &amp;fields) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#abc9ab0af3c1ca576ad0bbaa8f2bc903f">getFields</a>(unsigned n, const char **fieldNames, BSONElement *fields) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a16873498b321b8318cf738d8004d3ec0">getFieldsDotted</a>(const StringData &amp;name, BSONElementSet &amp;ret) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>getFieldsDotted</b>(const StringData &amp;name, BSONElementMSet &amp;ret) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>getFieldUsingIndexNames</b>(const char *fieldName, const BSONObj &amp;indexKey) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ab6e937db6b5ab15ff2344ee6206f589f">getIntField</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#adedbe8efead4232baab789d0ade56bfa">getObjectField</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#af1b56c489fb73a92de49320cb69bb78a">getObjectID</a>(BSONElement &amp;e) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#abcc917081c8bc1231cdad6d992e2542d">getOwned</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#aa694769259ef37513ec263e590cd6135">getStringField</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>GT</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>GTE</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a627a587a3e23c31dd692af299c9bdb96">hasElement</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a0767cf57f3953d2c838a22e0e8e740dd">hasField</a>(const char *name) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a4a793f33b331d36dd65aba2f819bd0a6">hash</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a89ed65b4cce2e8a19730086020dffa7f">hexDump</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a0556f9467cfe9383a64730369dcce889">init</a>(const char *data, bool check=true)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a31ee744660d52c47fa319f1860d97042">isEmpty</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a1537ebd63b87079aae45b4021c55f232">isOwned</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a88611f11cc1c68ccd3a190ee6a40dd3d">isValid</a>()</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>iterator</b> typedef (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a5628b357af6ead2de22bb8760bf5a018">jsonString</a>(JsonStringFormat format=Strict, int pretty=0) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>LT</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>LTE</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>MatchType</b> enum name (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a2e1f3e6e64dc320107c21100a46b2968">md5</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>NE</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a0924f0cc8a01e716ed398d6af51370d9">nFields</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>NIN</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a73d20448bb811e0f0fb2b0bc7430e0a1">objdata</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#adb7630bc73b3a46398ad12f4bfbc60fc">objsize</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#aba3b4caff595df70521a03ce09f3a60d">okForStorage</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opALL</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>opELEM_MATCH</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>operator&lt;</b>(const BSONObj &amp;other) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>operator&lt;=</b>(const BSONObj &amp;other) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>operator==</b>(const BSONObj &amp;other) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>operator&gt;</b>(const BSONObj &amp;other) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>operator&gt;=</b>(const BSONObj &amp;other) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a2dfb2aeb05eb6b1eaf8a8814b0025355">operator[]</a>(const char *field) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>operator[]</b>(const string &amp;field) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>operator[]</b>(int field) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opEXISTS</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>opIN</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opISNULL</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>opMAX_DISTANCE</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opMOD</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>opNEAR</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opOPTIONS</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>opREGEX</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opSIZE</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>opTYPE</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>opWITHIN</b> enum value (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a235a839a205f21d4cac45df320def1ea">replaceFieldNames</a>(const BSONObj &amp;obj) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ad7b899c814889c614948b2aac018c6ee">shallowEqual</a>(const BSONObj &amp;r) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a0a494961fb2bb56b03b1b5610d242f20">toString</a>(bool isArray=false, bool full=false) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"><td class="entry"><b>toString</b>(StringBuilder &amp;s, bool isArray=false, bool full=false) const  (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#aa0973e469c63cf5ac67553b320019928">valid</a>() const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a6dfbcaf3083ad9207e7d24fedeeed72b">Vals</a>(vector&lt; T &gt; &amp;) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#aa58e55038b9ea2509fb5ac2c04b50f5d">Vals</a>(list&lt; T &gt; &amp;) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a0ebbe95e6e9d95f1e6a8d7d94e5b0e49">vals</a>(vector&lt; T &gt; &amp;) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ab263f37255384d08f5063f3b993a47ca">vals</a>(list&lt; T &gt; &amp;) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#ab55ab67739ab937601373cb67d9ff7f2">woCompare</a>(const BSONObj &amp;r, const Ordering &amp;o, bool considerFieldName=true) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a7421ad4dbf470dc16c9979f4a0d1b6d1">woCompare</a>(const BSONObj &amp;r, const BSONObj &amp;ordering=BSONObj(), bool considerFieldName=true) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classbson_1_1BSONObj.html#a1a712991a3ffcba10c4c58119c7118c1">woSortOrder</a>(const BSONObj &amp;r, const BSONObj &amp;sortKey, bool useDotted=false) const </td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"></td></tr>
  <tr bgcolor="#f0f0f0"class="even"><td class="entry"><b>~BSONObj</b>() (defined in <a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a>)</td><td class="entry"><a class="el" href="classbson_1_1BSONObj.html">bson::BSONObj</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
</table></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jul 6 2014 16:01:12 for SequoiaDB by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.2
</small></address>
</body>
</html>
