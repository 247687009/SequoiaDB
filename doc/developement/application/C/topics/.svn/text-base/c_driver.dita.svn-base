<?xml version="1.0" encoding="GB2312"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_y14_42s_wj">
  <title>C 开发基础</title>
  <body>
     <p>本节介绍使用 C 程序运行 SequoiaDB。首先安装 SequoiaDB，安装信息请查看 <xref href="../../../../installation/server_installation/topics/server_installation.dita">SequoiaDB 服务器安装</xref>章节。</p>
     <p>这里介绍如何使用 C 客户端驱动接口编写使用 SequoiaDB 数据库的程序。为了简单起见，下面的例子不全部是完整的代码，只起示例性作用。可到 /sequoiadb/client/samples/C 下获取相应的完整的代码。</p>
     <section>
        <title>数据库操作</title>
        <ul>
           <li>数据库连接（Connecting）
                  <p>编写完整客户端文件 connect.c 演示连接到数据库。文件必须包含“client.h”头文件。</p><codeblock>#include &lt;stdio.h&gt;  
#include "client.h"

// Display Syntax Error
void displaySyntax ( CHAR *pCommand )
{
   printf ( "Syntax: %s&lt;hostname&gt; &lt;servicename&gt; &lt;username&gt; &lt;password&gt;"
            OSS_NEWLINE, pCommand ) ;
}

INT32 main ( INT32 argc, CHAR **argv )
{
   // define a connecion handle; use to connect to database
   sdbConnectionHandle connection    = 0 ;
   INT32 rc = SDB_OK ;

   // verify syntax
   if ( 5 != argc )
   {
      displaySyntax ( (CHAR*)argv[0] ) ;
      exit ( 0 ) ;
   }

   // read argument
   CHAR *pHostName    = (CHAR*)argv[1] ;
   CHAR *pServiceName = (CHAR*)argv[2] ;
   CHAR *pUsr         = (CHAR*)argv[3] ;
   CHAR *pPasswd      = (CHAR*)argv[4] ;

   // connect to database
   rc = sdbConnect ( pHostName, pServiceName, pUsr, pPasswd, &amp;connection ) ;
   if( rc!=SDB_OK )
   {
      printf("Fail to connet to database, rc = %d" OSS_NEWLINE, rc ) ;
      goto error ;
   }

   done:
   // disconnect from database
   sdbDisconnect ( connection ) ;
   // release connection
   sdbReleaseConnection ( connection ) ;
   return 0 ;
   error:
   goto done ;
   }</codeblock>
              <p>在 Linux 下，可以如下编译及链接动态链接库文件 libsdbc.so。</p>
              <codeblock>$gcc -o connect connect.c -I /<i>&lt;PATH></i>/sdbdriver/include -lsdbc -L /<i>&lt;PATH></i>/sdbdriver/lib
$ ./connect localhost 11810 "" ""
connect success!</codeblock>
               <note>本例程连接到本地数据库的11810端口，使用的是空的用户名很密码。用户需要根据自己的实际情况配置参数。但如果数据库已经创建用户，可以使用已经创建的用户及密码连接到数据库。</note>
           </li>
           <li>创建集合空间，集合<p>以下创建了一个名字为“foo”的集合空间和一个名字为“bar”的集合，集合空间内的集合的数据页大小为4k。可根据实际情况选择不同大小的数据页。创建集合后，可对集合做增删改查等操作。</p>
               <codeblock>// 首先，定义集合空间、集合句柄。
sdbCSHandle collectionspace       = 0 ;
sdbConnectionHandle connection    = 0 ;
// 创建集合空间"foo"
rc = sdbCreateCollectionSpace ( connection, "foo", SDB_PAGESIZE_4K, &amp;collectionspace ) ;  
// 在新建立的集合空间中创建集合"bar"
rc = sdbCreateCollection ( collectionspace, "bar", &amp;collection ) ;</codeblock>
              <note>在创建集合“bar”时并没有附加分区、压缩等信息，关于创建集合的更详细情况，请参考详情请查阅 <xref href="..\..\..\..\..\c\html\index.html" format="html">C API</xref></note>
           </li>
           <li>插入数据<p>SequoiaDB 存储数据采用 BSON 的格式，BSON 是一种类似 JSON 的二进制对象。保存数据库中的数据，首先必须创建 bson 对象。下面会将{name:"Tom",age:24}插入到集合中。</p>
              <codeblock>// 首先，我们需要创建一个插入的 bson 对象。
INT32 rc = SDB_OK ;
bson obj ;
bson_init( &amp;obj ) ;
bson_append_string( &amp;obj, "name", "tom" ) ;
bson_append_int( &amp;obj, "age", 24 ) ;
rc = bson_finish( &amp;obj ) ;
if ( rc != SDB_OK )
printf("Error.");
// 接着，把此 bson 对象插入集合中
rc = sdbInsert ( collection, &amp;obj ) ;</codeblock>
           </li>
           <li>查询<p>查询操作需要一个游标句柄存放查询的结果到本地。要获得查询的结果需要使用游标操作。本例使用了游标操作的 sdbNext 接口，表示从查询结果中取到一条记录。此示例中没有设置查询条件，筛选条件，排序情况，及仅使用默认索引。</p>
              <p><codeblock>// 定义一个游标句柄
sdbCursorHandle cursor = 0 ;
…
// 查询所有记录，查询结果放在游标句柄中
rc = sdbQuery(collection, NULL, NULL, NULL, NULL, 0, -1, &amp;cursor ) ;
// 从游标中显示所有记录
bson_init(obj);
while( !( rc=sdbNext( cursor, &amp;obj ) ) )
{
    bson_print( &amp;obj ) ;
    bson_destroy(&amp;obj) ;
    bson_init(&amp;obj);
}
bson_destroy(obj) ;</codeblock></p>
           </li>
           <li>索引<p>此处，我们在集合句柄 collection 指定的集合中创建一个以“name”为升序，“age”为降序的索引。
                  <codeblock>#define INDEX_NAME "index"
…
// 首先创建一 bson 对象包含将要创建的索引的信息
bson_init( &amp;obj ) ;
bson_append_int( &amp;obj, "name", 1 ) ;
bson_append_int( &amp;obj, "age", -1 ) ;
rc = bson_finish( &amp;obj ) ;
if ( rc != SDB_OK )
printf("Error.");
// 创建一个以"name"为升序，"age"为降序的索引
rc = sdbCreateIndex ( collection, &amp;obj, INDEX_NAME, FALSE, FALSE ) ;
bson_destroy ( &amp;obj ) ;   </codeblock></p>
           </li>
           <li>更新
              <p>此处，我们在集合句柄 collection 指定的集合中更新记录。因为没有指定数据匹配规则，所以此示例将更新集合中所有的集合。</p>
              <codeblock>// 先创建一个包含更新规则的 bson 对象
bson_init( &amp;rule ) ;
bson_append_start_object ( &amp;rule, "$set" ) ;
bson_append_int ( &amp;rule, "age", 19 ) ;
bson_append_finish_object ( &amp;rule ) ;
rc = bson_finish ( &amp;rule ) ;
if ( rc != SDB_OK )
printf("Error.");
// 打印出更新规则
bson_print( &amp;rule ) ;
// 更新记录
rc = sdbUpdate( collection, &amp;rule, NULL, NULL ) ;
bson_destroy(&amp;rule);</codeblock>
              <p>此处，因为没有指定记录匹配条件，所以此示例将更新集合句柄 collection 指定的集合中所有的记录。</p>
           </li>
       </ul>
     </section>
     <section>
        <title>集群操作</title>
        <ul>
           <li>分区组操作
              <p>分区组操作包括创建分区组（sdbCreateReplicaGroup），得到分区组句柄（sdbGetReplicaGroup），启动分区组（sdbStartReplicaGroup），停止分区组（sdbStopReplicaGroup）等。以下为分区组操作示例性的例子。真正的应用应包括错误检测等。
                  <codeblock>// 定义一个分区组句柄
sdbReplicaGroupHandle rg = 0 ;
…
// 先建立一个编目分区组
rc = sdbCreateCataReplicaGroup ( connection, HOST_NAME, SERVICE_NAME, CATALOG_SET_PATH , NULL ) ;
// 创建数据分区组
rc = sdbCreateReplicaGroup ( connection, GROUP_NAME, &amp;rg ) ;
// 创建数据节点
rc = sdbCreateNode ( rg, HOST_NAME1, SERVICE_NAME1, DATABASE_PATH1, NULL ) ;
// 启动分区组
rc = sdbStartReplicaGroup( rg ) ;</codeblock></p>
           </li>
           <li>数据节点操作
              <p>数据节点操作包括创建数据节点（sdbCreateNode），得到主数据节点（sdbGetNodeMaster），得到从数据节点（sdbGetNodeSlave），启动数据节点（sdbStartNode），停止数据节点（sdbStopNode）等。以下为数据节点操作示例性的例子。真正的应用应包括错误检测等。
                  <codeblock>// 定义一个数据节点句柄
sdbNodeHandle masternode   = 0 ;
sdbNodeHandle slavenode    = 0 ;
…
// 获取主数据节点
rc = sdbGetNodeMaster ( rg, &amp;masternode ) ;
//获取从数据节点
rc = sdbGetNodeSlave ( rg, &amp;slavenode ) ;</codeblock></p>
            </li>
        </ul>
     </section>
  </body>
</topic>