<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_kj2_43z_fm">
  <title>C# Development Foundation</title>
  <body>
    <p>Here's how to use the driver interface written in C# using SequoiaDB database program. This document describes a simple C# sample SequoiaDB 
        database-driver, detailed specification can refer to the official use of <xref href="..\..\..\..\cs\html\index.html" format="html">C# API</xref> documentation.</p>
    <section>
      <title>Namespace</title>
      <p>Before using C# driver related API, you must add the following using declaration in source code:</p>
      <p>using SequoiaDB;</p>
      <p>using SequoiaDB.Bson;</p>
    </section>
    <section>
      <title>Data Manipulation</title>
    </section>      
    <section>      
      <ul>
        <li>Connect to the database and authentication <p>If the database does not create a user,
                        you can anonymously connect to the
                        database:</p><codeblock>string addr = "127.0.0.1:11810";
Sequoiadb sdb = new Sequoiadb(addr);
try
{
    sdb.Connect();
}
catch (BaseException e)
{
    Console.WriteLine("ErrorCode:{0}, ErrorType:{1}", e.ErrorCode, e.ErrorType);
    Console.WriteLine(e.Message);
}
catch (System.Exception e)
{
    Console.WriteLine(e.StackTrace);
}</codeblock><p>Otherwise,
                        when the connection must specify a user name and
                        password:</p><codeblock>string addr = "127.0.0.1:11810";
Sequoiadb sdb = new Sequoiadb(addr);
try
{
    sdb.Connect("testusr", "testpwd");
}
catch (BaseException e)
{
    Console.WriteLine("ErrorCode:{0}, ErrorType:{1}", e.ErrorCode, e.ErrorType);
    Console.WriteLine(e.Message);
}
catch (System.Exception e)
{
    Console.WriteLine(e.StackTrace);
    }</codeblock><p>Here
                        are the exception information try and catch blocks, all operations following
                        will throw the same exception information, it is no longer relevant given
                        the try and catch blocks.</p></li>
        <li>Disconnect from the database
          <codeblock>// do not forget to disconnect from sdb
sdb.Disconnect();</codeblock>
        </li>
        <li>Get or create a collection space and collections
          <p>By name, to give the corresponding CollectionSpace, if not, create: </p><codeblock>// create collectionspace, if collectionspace exists get it
string csName = "TestCS";
CollectionSpace cs = sdb.GetCollecitonSpace(csName);
if (cs == null)
cs = sdb.CreateCollectionSpace(csName);
// or sdb.CreateCollectionSpace(csName, pageSize), need to specify the pageSize</codeblock><p>By name, to give the corresponding Collection, and if not, create:</p><codeblock>// create collection, if collection exists get it
string clName = "TestCL";
DBCollection dbc = cs.GetCollection(clName);
if (dbc == null)
dbc = cs.CreateCollection(clName);
//or cs.createCollection(collectionName, options), create collection with some options</codeblock>
        </li>
        <li>Insert operation for Collection <p>Need to insert data BsonDocument create and
                        insert:</p>
                    <codeblock>BsonDocument insertor = new BsonDocument();
string date = DateTime.Now.ToString();
insertor.Add("operation", "Insert");
insertor.Add("date", date);
ObjectId id = dbc.Insert(insertor);</codeblock><p>Of
                        course, BsonDocument BsonDocument can also be nested object, And you can
                        also directly a complete new  BsonDocument, without going through the Add
                        method:</p><codeblock>BsonDocumentinsertor = new BsonDocument
{
    {"FirstName","John"},
    {"LastName","Smith"},
    {"Age",50},
    {"id",i},
    {"Address",
        new BsonDocument
        {
            {"StreetAddress","212ndStreet"},
            {"City","new York"},
            {"State","NY"},
            {"PostalCode","10021"}
        }
    },
    {"PhoneNumber",
        new BsonDocument
        {
            {"Type","Home"},
            {"Number","212555-1234"}
        }
    }
};
Insert the number of data:
//bulkinsert
List&lt;BsonDocument> insertor=new List &lt;BsonDocument> ();
for(inti=0;i&lt;10;i++)
{
    BsonDocumentobj=new BsonDocument();
    obj.Add("operation","BulkInsert");
    obj.Add("date",DateTime.Now.ToString());
    insertor.Add(obj);
}
dbc.BulkInsert(insertor,0);</codeblock></li>
        <li>Index-related operations <p>Create an
                        index:</p><codeblock>//createindexkey,indexonattribute'Id'byASC(1)/DESC(-1)
BsonDocument key = new BsonDocument();
key.Add("id", 1);
string name = "index name";
bool isUnique = true;
bool isEnforced = true;
dbc.CreateIndex(name, key, isUnique, isEnforced);</codeblock><p>Delete
                        Index:</p><codeblock>string name = "index name";
dbc.DropIndex(name);</codeblock></li>
        <li>Query operation<p>Query, you need to use a cursor to traverse the query results, but can
                        first get the index of the current Collection, if not empty, as the
                        development of an access plan (hint) for inquiries:
                        </p><codeblock>DBCursor icursor = dbc.GetIndex(name);
BsonDocument index = icursor.Current();   </codeblock><p>
                        BsonDocument objects are used to construct the corresponding queries,
                        including: Query matching rules (matcher, include the appropriate query),
                        domain selection (selector), sorting rules (oredrBy, in increasing order or
                        descending), to develop access plans (hint), skip record number (0), the
                        number of records returned (-1:return all data). After the inquiry, to
                        obtain the corresponding Cursor, for the results obtained by traversing the
                        query:
                        </p><codeblock>BsonDocument matcher = new BsonDocument();
BsonDocument conditon = new BsonDocument();
conditon.Add("$gte", 0);
conditon.Add("$lte", 9);
matcher.Add("id", conditon);
BsonDocument selector = new BsonDocument();
selector.Add("id", null);
selector.Add("Age", null);
BsonDocument orderBy = new BsonDocument();
orderBy.Add("id", -1);
BsonDocument hint = null;
if (index != null)
    hint = index;
else
    hint = new BsonDocument();
DBCursor cursor = dbc.Query(matcher, selector, orderBy, hint, 0, -1);    </codeblock><p>Use
                        DBCursor cursor to
                    traverse:</p><codeblock>while (cursor.Next() != null)
Console.WriteLine(cursor.Current());</codeblock></li>
        <li>Delete operation <p>Construct the corresponding BsonDocument object, set the conditions
                        for
                    deletion:</p><codeblock>//createthedeletecondition
BsonDocument drop = new BsonDocument();
drop.Add("Last Name", "Smith");
coll.Delete(drop);</codeblock></li>
        <li>Update operation <p>Construct the corresponding BsonDocument object used to set the
                        update condition, you can also create DBQuery object encapsulates all of the
                        query or update
                        rules:</p><codeblock>DBQuery query = new DBQuery();
BsonDocument updater = new BsonDocument();
BsonDocument matcher = new BsonDocument();
BsonDocument modifier = new BsonDocument();
updater.Add("Age", 25);
modifier.Add("$set", updater);
matcher.Add("First Name", "John");
query.Matcher = matcher;
query.Modifier = modifier;
dbc.Update(query);       </codeblock><p>Update
                        operation, if the conditions are not met matcher, then insert this
                        record:</p><codeblock>dbc.Upsert(query);</codeblock></li>
        
      </ul>
    </section>
  </body>
</topic>
